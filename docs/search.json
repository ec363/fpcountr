[{"path":"https://ec363.github.io/fpcountr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ec363.github.io/fpcountr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ec363.github.io/fpcountr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ec363.github.io/fpcountr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ec363.github.io/fpcountr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ec363.github.io/fpcountr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ec363.github.io/fpcountr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ec363.github.io/fpcountr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ec363.github.io/fpcountr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ec363.github.io/fpcountr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ec363.github.io/fpcountr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ec363.github.io/fpcountr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ec363.github.io/fpcountr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ec363.github.io/fpcountr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ec363.github.io/fpcountr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ec363.github.io/fpcountr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ec363.github.io/fpcountr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ec363.github.io/fpcountr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ec363.github.io/fpcountr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ec363.github.io/fpcountr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ec363.github.io/fpcountr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ec363.github.io/fpcountr/articles/data_parsing.html","id":"metadata-requirements","dir":"Articles","previous_headings":"","what":"Metadata Requirements","title":"Data Parsing and Metadata","text":"mean metadata necessary? metadata essential calculations, ability group samples variable, take mean standard deviation level (e.g. according dilution measured calibration, level inducer_concentration used experiment). Others required specify axes plots, e.g. dilution calibrations time timecourse experiment. Still others used verify calculations: calibration values differ different instruments, instrument crucial bit metadata every calibration. Metadata files prepared ‘tidy data’ format, may look something like , although exact variables differ assay type.     calibrations: absorbance spectra  calibrations: fluorescence data  experimental data  Notes: Variables required calculations included sake reproducibility. channel_name/ex/em refers fluorescence ‘channel’, .e. filter set. one commonly used GFPs includes excitation filter 485nm 20nm bandwidth emission 535nm 25nm bandwidth. , channel_name may ‘green’ ‘blue_ex_green_em’ anything concise meaningful calibrations. taking calibrations several gains (recommended), names given fluorescence measurements/readings must match value channel_name exactly (e.g. channel_name = ‘green’ measurements taken called ‘green_40’, ‘green_50’, .. ‘green_120’). channel_ex “485/20”. protein expected equal “none” blank/buffer wells empty wells used assay. dilution specified 1 undiluted sample, 0.5 2-fold diluted sample, etc. dilution must left blank blank buffer wells. mw_gmol1 molecular weight g/mol. concentration_ngul concentration ng/ul. row column also expected every function , auto-generated parser function metadata well column. time auto-generated parser function timecourse data.","code":""},{"path":"https://ec363.github.io/fpcountr/articles/data_parsing.html","id":"save-metadata-templates","dir":"Articles","previous_headings":"Metadata Requirements","what":"Save metadata templates","title":"Data Parsing and Metadata","text":"shortcut creating metadata templates, run:","code":"save_metadata_template(   data_type = \"absspectrum\", # OPTIONS: \"absspectrum\", \"fluordata\", \"exptdata\"   plate_type = 96, # 96 for 96-well plate, etc   outfolder = \"templates\" # where to save files )"},{"path":[]},{"path":"https://ec363.github.io/fpcountr/articles/data_parsing.html","id":"using-tecan-spark-plate-readers","dir":"Articles","previous_headings":"Methods for Parsing Data","what":"Using Tecan Spark plate readers","title":"Data Parsing and Metadata","text":"fpcountr developed laboratory used Tecan Spark instruments, bundled functions package can parse data exported Spark plate readers. need different parsing functions depending whether using Magellan software SparkControl software. Magellan software parsers parse_magellan() handles standard/endpoint timecourse/kinetic data. parse data file, minimum information need location data metadata files, whether/data timeseries (.e. timecourse/kinetic data). fluorescence data endpoint/standard assays, calibrations, might use: function can work number readings extra information, assuming exported information data, metadata. raw data export file includes lines fluorescence absorbance data occupied metadata ‘Well Positions’, ‘Layout’ ‘Replicate Info’, needs indicating metadata_above (indicate lines data taken metadata), metadata_below. , exported temperature data fluorescence data, causing data right-shifted otherwise default second column, use custom = TRUE specify startcol endcol. data include 96 wells expected, e.g. truncated H11 instead H12 due export options, can use insert_wells_below = 1 add blank line end data. can help matching metadata files containing entries 96 wells data containing fewer 96 entries. timecourse/kinetic assays, microbial growth curve experiments, choose timeseries = TRUE specify: timestart: text column 1 identify first row data. usually “0s”. interval: number minutes 2 readings mode: specifies whether interval starts readings (“read_first”) incubation (“incubate_first”). normally “read_first”. separate function, parse_magellan_spectrum(), used parse spectrum data. works similarly. worth sanity checking outputs make sure data extracted correctly, adjusting customisation parameters isn’t. SparkControl software parsers Analogous functions exist also SparkControl software exports. parse_sparkcontrol() handles standard/endpoint timecourse/kinetic data: parse_sparkcontrol_spectrum() handles spectrum data:","code":"parsed_data <- parse_magellan(   data_csv = \"path/to/data.csv\",   metadata_csv = \"path/to/metadata.csv\",   timeseries = FALSE ) parsed_data <- parse_magellan(   data_csv = \"path/to/data.csv\",   metadata_csv = \"path/to/metadata.csv\",   timeseries = FALSE,   metadata_above = 1,   metadata_below = 0 ) parsed_data <- parse_magellan(   data_csv = \"path/to/data.csv\",   metadata_csv = \"path/to/metadata.csv\",   timeseries = FALSE,   custom = TRUE, startcol = 3, endcol = 98 ) parsed_data <- parse_magellan(   data_csv = \"path/to/data.csv\",   metadata_csv = \"path/to/metadata.csv\",   timeseries = FALSE,   custom = TRUE,   startcol = 3,   endcol = 97,   insert_wells_above = 0,   insert_wells_below = 1 ) parsed_data <- parse_magellan(   data_csv = \"path/to/data.csv\",   metadata_csv = \"path/to/metadata.csv\",   timeseries = TRUE,   timestart = \"0s\",   interval = 10, # in minutes   mode = \"read_first\", # mode can only be \"read_first\" or \"incubate_first\"   metadata_above = 1,   metadata_below = 0,   custom = TRUE,   startcol = 3,   endcol = 97,   insert_wells_above = 0,   insert_wells_below = 1 ) parsed_data_spectrum <- parse_magellan_spectrum(   data_csv = \"path/to/data.csv\",   metadata_csv = \"path/to/metadata.csv\",   wellstart = \"A1\", wellend = \"H12\" ) parsed_data <- parse_sparkcontrol(   data_csv = \"path/to/data.csv\",   metadata_csv = \"path/to/metadata.csv\",   timeseries = FALSE )  parsed_data <- parse_sparkcontrol(   data_csv = \"path/to/data.csv\",   metadata_csv = \"path/to/metadata.csv\",   timeseries = TRUE ) parsed_data_spectrum <- parse_sparkcontrol_spectrum(   data_csv = \"path/to/data.csv\",   metadata_csv = \"path/to/metadata.csv\",   wellstart = \"A1\", wellend = \"H12\" )"},{"path":"https://ec363.github.io/fpcountr/articles/data_parsing.html","id":"examples","dir":"Articles","previous_headings":"Methods for Parsing Data","what":"Examples","title":"Data Parsing and Metadata","text":"1. Absorbance spectrum data calibration mTagBFP2 Raw data: Code: Parsed data:  2. Fluorescence data calibration mTagBFP2 Raw data: Code: Parsed data:  3. Experimental data Raw data: Code: Parsed data:","code":"library(fpcountr) parsed_data <- parse_magellan_spectrum(   data_csv = \"data/example_absorbance.csv\",   metadata_csv = \"data/example_absorbance_meta.csv\",   wellstart = \"A1\", wellend = \"B12\" ) ## 24 wells identified. parsed_data <- parse_magellan(   data_csv = \"data/example_fluorescence.csv\",   metadata_csv = \"data/example_fluorescence_meta.csv\",   timeseries = FALSE,   custom = TRUE,   startcol = 2,   endcol = 25,   insert_wells_above = 0,   insert_wells_below = 72 ) parsed_data <- parse_magellan(   data_csv = \"data/example_experiment.csv\",   metadata_csv = \"data/example_experiment_meta.csv\",   timeseries = TRUE,   timestart = \"0s\",   interval = 10, # minutes.   mode = \"read_first\", # mode can only be \"read_first\" or \"incubate_first\"   metadata_above = 1,   metadata_below = 0,   custom = TRUE,   startcol = 3,   endcol = 97,   insert_wells_above = 0,   insert_wells_below = 1 )"},{"path":"https://ec363.github.io/fpcountr/articles/data_parsing.html","id":"using-other-plate-readers","dir":"Articles","previous_headings":"Methods for Parsing Data","what":"Using other plate readers","title":"Data Parsing and Metadata","text":"functions use clues Tecan Spark software’s standardised data formats extract data raw files correctly, therefore work data plate readers. plate readers, recommend two options: Writing functions advanced users working large number similar data files, writing functions best option automate parsing large number files. Note : output needs ‘tidy data’ fpcountr functions additionally expect metadata joined left data, well column metadata used create two columns: row, column, placed right data. resultant structure required parsed data files , left right: [metadata columns], [data columns], ‘row’, ‘column’. Using Parsley users time need automate parsing, recommended route use Parsley. Parsley web app developed allow parse data type ‘tidy data’ format. graphical user interface (GUI) lets select location data characteristics within raw data file using point click interface, generates parsed data spreadsheet , well ‘parser function’ file, can reused parsing multiple data files. software free, available web require download software creation account. (However, can install Github run locally like . Running locally speeds .)","code":""},{"path":"https://ec363.github.io/fpcountr/articles/expts_i_timecourse_cell.html","id":"timecourse-cellular-fluorescence","dir":"Articles","previous_headings":"","what":"Timecourse cellular fluorescence","title":"Experiments I: Timecourse Cellular Fluorescence","text":"Analysing (1) Timecourse cellular fluorescence data covered full ‘Getting Started’ vignette: see ‘Example Code’ -> ‘Processing data E. coli fluorescent protein expression experiments’. (2) Endpoint (3) Cell-free data, see vignettes ‘Experiment II-III’.","code":""},{"path":"https://ec363.github.io/fpcountr/articles/fpcountr.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"fpcountr","text":"package written R can installed straight GitHub: need run code .","code":"# install.packages(\"devtools\") # run this if you don't have devtools installed already devtools::install_github(\"ec363/fpcountr\") # run this to install fpcountr"},{"path":"https://ec363.github.io/fpcountr/articles/fpcountr.html","id":"example-scenario","dir":"Articles","previous_headings":"","what":"Example Scenario","title":"fpcountr","text":"Example Scenario: wish work many molecules fluorescent protein produced vector expressing mTagBFP2. : experimental data mTagBFP2 expression, well mTagBFP2 calibration carried using FPCountR method. want : create conversion factors describe blue fluorescence mTagBFP2 relates molecule number instrument. use conversion factors interpret experiment file, work number proteins per cell expressed mTagBFP2 expression vectors across different conditions. package comes example data exactly type, example code allow calculate protein numbers.","code":""},{"path":"https://ec363.github.io/fpcountr/articles/fpcountr.html","id":"example-data","dir":"Articles","previous_headings":"","what":"Example Data","title":"fpcountr","text":"following example data files provided package: example data used script . try , create new folder running script vignette (e.g. call fpcountr_example). Open new R script RStudio (File > New File > R Script), save folder, navigate current working directory (Session > Set Working Directory > Source File Location). find example data, run: gives location files. Find folder, copy files listed subfolder fpcountr_example called data.","code":"system.file(\"extdata\", \"\", package = \"fpcountr\", mustWork = TRUE)"},{"path":"https://ec363.github.io/fpcountr/articles/fpcountr.html","id":"example-code","dir":"Articles","previous_headings":"","what":"Example Code","title":"fpcountr","text":"code end vignette can copied script run line line. functions take existing data files, process , save new files (data CSV files, plots PDF files). data files required subsequent functions, whereas plots intended let check progress functions identify something gone wrong. Load fpcountr package verify fpcountr_example directory.","code":"library(fpcountr)"},{"path":[]},{"path":"https://ec363.github.io/fpcountr/articles/fpcountr.html","id":"parse-absorbance-spectrum-data","dir":"Articles","previous_headings":"Example Code > Protein concentration determination with the ECmax assay","what":"1. Parse absorbance spectrum data","title":"fpcountr","text":"first thing need process absorbance spectrum data file, exported data file right format processing function. can process data, need extract data exported data file, tidy join metadata. process called parsing. Parsing: raw data files exported plate readers require ‘parsing’ can processed downstream functions. See vignette(\"data_parsing\") details. Metadata: Parsing requires metadata joined data. largely aspects experiments record metadata, data-processing function FPCountR expects minimum amount metadata required downstream analysis. See vignette(\"data_parsing\") details . using Tecan Spark plate reader running Magellan software: use parse_magellan_spectrum(). using plate readers: see vignette(\"data_parsing\"). used Spark, ’ll use parse_magellan_spectrum(): takes absorbance data file (example_absorbance.csv), export format provided plate reader, user-produced metadata file (example_absorbance_meta.csv), parses correct format. Arguments required: data_csv - file path absorbance data file metadata_csv - file path metadata file wellstart = “A1”, wellend = “B12” - first last wells data Warnings expected: likely get warning NAs introduced coercion. just means empty wells filled NA values. Outputs produced: processed data file name [raw data filename]_parsed.csv (,example_absorbance_parsed_processed.csv), location data found. dataframe (called parsed_data_spectrum) parsed data returned, can used inspect parsing. View fragment data frame check.  can see, data now tidy, one column per variable, allowing automated processing subsequent steps.","code":"parsed_data_spectrum <- parse_magellan_spectrum(   data_csv = \"data/example_absorbance.csv\",   metadata_csv = \"data/example_absorbance_meta.csv\",   wellstart = \"A1\", wellend = \"B12\" ) ## 24 wells identified. parsed_data_spectrum[1:24,c(1:100)] # view a fragment of the dataframe"},{"path":"https://ec363.github.io/fpcountr/articles/fpcountr.html","id":"process-absorbance-spectrum-data","dir":"Articles","previous_headings":"Example Code > Protein concentration determination with the ECmax assay","what":"2. Process absorbance spectrum data","title":"fpcountr","text":"Parsed spectrum data can processed. involves calculation path length samples, adjusting raw values path length 1cm, normalising data blanks. Path lengths: Calculating path lengths accurately important part process. See vignette(\"path_lengths\") information. Arguments required: spectrum_csv - location parsed spectrum data file subset_rows, rows_to_keep… - whether want function consider certain rows/columns data. useful multiple calibrants per plate, function can handle one calibrant time xrange - range wavelengths want function restrict analysis . Input wavelength range used experiment. causes errors, often beneficial filter UV end, e.g. use 350-1000 400-1000. pl_method - method use path length calculations. Options: \"calc_each\" (calculate path length well separately), \"calc_blanks\" (calculate path length blanks use wells), \"volume\" (calculate path length given volume volume column). See vignette(\"path_lengths\"). buffer_used, concentration_used, temperature_used - related path length calculation. buffer_used must come list view_kfactors(), use view_kfactors() find closest buffer. Similarly, concentration_used must use units buffer refers view_kfactors() table. See vignette(\"path_lengths\"). outfolder - save files. Warnings expected: likely get warnings rows containing missing values. normal. Outputs produced: ..designated outfolder (, fp_quantification/): processed data file name [raw data filename]_parsed_processed.csv (,example_absorbance_parsed_processed.csv). plot1a_raw.pdf - raw data overview plot1b_raw_blanks.pdf - raw absorbance blank wells plot2a_a9001000.pdf - raw data 900-1000nm (relevant path length calculation) plot2b_pathlengths.pdf - path length estimations three methods (regardless chosen) plot2c_rawcm1.pdf - raw data normalised pathlength = 1cm plot3_normcm1.pdf - data normalised blank wells (fluorescent protein peaks usually become visible) plot4_mean_normcm1.pdf - mean normalised data, across replicates ..RStudio: R console, messages let follow progress data processing. dataframe (called processed_data_spectrum) processed data returned, can used inspect processing. Let’s look fragment processed data: Note new columns red. normalised_cm1_value column used calculating concentration FP next step. absolute numbers low, can verify peak absorbance mTagBFP2 401 nm. easily evident plots, can also verify blanks noisy replicates similar:","code":"# Create folder to hold the FP quantification function output files dir.create(\"fp_quantification\")  # Process spectra processed_data_spectrum <- process_absorbance_spectrum(      # basics   spectrum_csv = \"data/example_absorbance_parsed.csv\",   subset_rows = TRUE, rows_to_keep = c(\"A\",\"B\"), columns_to_keep = c(1:12),   xrange = c(250,1000),      # path length calcs   pl_method = \"calc_blanks\",   buffer_used = \"TBS\", concentration_used = 0.005, temperature_used = 30,      # saving   outfolder = \"fp_quantification\" ) ##  ## Calculating k-factor for TBS at concentration 0.005 at temperature 30 oC. ##  ## Reference k-factor 0.172. ##  ## K-factors available for given buffer:  ##   buffer concentration units description kfactor fold_change ## 1    TBS          0.05     M    TBS_50mM   0.166   0.9595376 ##  ## Values used for model (kfactor ~ concentration):  ##   buffer concentration units description kfactor fold_change ## 1  water          0.00  none       Water   0.173   1.0000000 ## 2    TBS          0.05     M    TBS_50mM   0.166   0.9595376 ##  ## Change in k-factor required for given buffer: 0.996. ##  ## Values used for model (fold_change ~ temperature):  ##   temperature kfactor fold_change ## 1          25   0.172       1.000 ## 2          28   0.174       1.012 ## 3          31   0.177       1.029 ## 4          34   0.179       1.041 ## 5          37   0.183       1.064 ## 6          41   0.188       1.093 ## 7          45   0.191       1.110 ##  ## Change in k-factor required for given temperature: 1.024. ##  ## Overall k-factor: 0.175. ##  ## Calculating path lengths using chosen method: calc_blanks. ## Path length will calculated from the blanks data. processed_data_spectrum[195:225,c(1:3,7,9,10,12,13)] # view a fragment of the dataframe"},{"path":"https://ec363.github.io/fpcountr/articles/fpcountr.html","id":"get-concentration-using-ecmax-assay","dir":"Articles","previous_headings":"Example Code > Protein concentration determination with the ECmax assay","what":"3. Get concentration using ECmax assay","title":"fpcountr","text":"Using processed data, can now work concentration FP dilution using get_conc_ecmax() function. takes EC excitation maximum FP question FPbase, calculates concentration absorbance position. also normalises carefully background signal one 3 ways. Code: Arguments required: protein_slug - short / lower-case form name FP, used search FPbase protein_seq - sequence protein, molecular weight calculations processed_spectrum_csv - location processed spectrum data file wells_to_remove - list wells might want remove (e.g. identified anomalous previous step) corr_method, wav_to_use1, wav_to_use2 - correction method path length correction. choose “none” (normalisation - absorbance excitation maximum used directly), “background” (subtract absorbance wav_to_use1 wavelength) “scatter” (extrapolate, using wav_to_use2 wavelength, precise background subtract). outfolder - save files Warnings expected: likely get warnings transformation : NaNs produced, log-10 transformation introduced infinite values rows containing missing values. normal. Outputs produced: ..designated outfolder (, fp_quantification/concentration/): processed data file name [raw data filename]_parsed_processed_ecmax.csv (,example_absorbance_parsed_processed_ecmax.csv). small table containing estimated concentrations using 3 normalisation methods: ecmax_coeffs.csv. table protein concentrations joined metadata, protein_concs_ecmax.csv, required combining fluorescence data next step, calculating conversion factors. plot1_abs_spectra_replicates.pdf - data normalised blank wells (identical plot3_normcm1.pdf process_absorbance_spectrum()) plot3a_abs_spectra_geomsmooth.pdf - data plot1 plotted geom_smooth plotting function annotated excitation maximum wavelength FPbase. serves check case model fitting fails next steps. plot3b_abs_spectra_modelcheck.pdf - results LOESS model fitting absorbance data annotated excitation maximum wavelength FPbase. Good plot check model fitting worked FPbase excitation maximum matches observed excitation maximum. plot5a_ecmax.pdf - illustrates steps processing: raw data, normalised data (red) fitted data (blue). plot5b_ecmax_stdmethod.pdf - visualisation linear fitting data normalised correction method “none” plot5c_ecmax_baselinenorm.pdf - visualisation linear fitting data normalised correction method “baseline” plot5c_ecmax_baselinenorm_baselinecheck.pdf - visualisation normalisation procedure using scatter plot5d_ecmax_scatternorm.pdf - visualisation linear fitting data normalised correction method “scatter” plot5d_ecmax_scatternorm_scattercheck.pdf - visualisation normalisation procedure using scatter plot6a_ecmax_models_all.pdf - comparison concentration vs dilution relationships across normalisation methods plot6b_ecmax_models_all_logplot.pdf - comparison concentration vs dilution relationships across normalisation methods log plot. Best place verify choice normalisation method. .. RStudio: dataframe (called proteinconcs) protein concentrations well, can used inspect processing. example data give 6.8 ng/ul top concentration. Plot3a illustrates model fitting spectra identification excitation maximum mTagBFP2:  Plot6b compares linear fit concentrations across normalisation techniques:","code":"proteinconcs <- get_conc_ecmax(   protein_slug = \"mtagbfp2\",   protein_seq = \"MVHHHHHHGSGVSKGEELIKENMHMKLYMEGTVDNHHFKCTSEGEGKPYEGTQTMRIKVVEGGPLPFAFDILATSFLYGSKTFINHTQGIPDFFKQSFPEGFTWERVTTYEDGGVLTATQDTSLQDGCLIYNVKIRGVNFTSNGPVMQKKTLGWEAFTETLYPADGGLEGRNDMALKLVGGSHLIANAKTTYRSKKPAKNLKMPGVYYVDYRLERIKEANNETYVEQHEVAVARYCDLPSKLGHKLN\",   processed_spectrum_csv = \"fp_quantification/example_absorbance_parsed_processed.csv\",   # wells_to_remove = c(),   corr_method = \"scatter\", wav_to_use1 = 500, wav_to_use2 = 450,   outfolder = \"fp_quantification/concentration\", ) ## FP data retrieved from FPbase. proteinconcs[1:12,] # view a fragment of the dataframe"},{"path":"https://ec363.github.io/fpcountr/articles/fpcountr.html","id":"conversion-factor-calculation","dir":"Articles","previous_headings":"Example Code","what":"Conversion factor calculation","title":"fpcountr","text":"Create folder calculation: Assemble metadata file, using original metadata file, protein concentrations file just obtained ECmax assay . able see concentration values joined metadata. joined metadata file metadata fluorescence assay.","code":"dir.create(\"conversion_factors\") # Join files fluorescence_meta1 <- read.csv(\"data/example_fluorescence_meta.csv\") fluorescence_meta2 <- read.csv(\"fp_quantification/concentration/protein_concs_ecmax.csv\") fluorescence_meta_joined <- dplyr::left_join(x = fluorescence_meta1, y = fluorescence_meta2) ## Joining with `by = join_by(media, calibrant, protein, replicate, well)` fluorescence_meta_joined <- cbind(fluorescence_meta_joined[ , !names(fluorescence_meta_joined) %in% c(\"well\")], fluorescence_meta_joined[ , \"well\"]) # move well column to right hand side - important for `generate_cfs()` names(fluorescence_meta_joined)[ncol(fluorescence_meta_joined)] <- \"well\" # rename last column write.csv(x = fluorescence_meta_joined,           file = \"conversion_factors/example_fluorescence_meta_joined.csv\",            row.names = FALSE) fluorescence_meta_joined[1:12,c(1,4,7,8,10,12:15)]"},{"path":"https://ec363.github.io/fpcountr/articles/fpcountr.html","id":"parse-fluorescence-data","dir":"Articles","previous_headings":"Example Code > Conversion factor calculation","what":"1. Parse fluorescence data","title":"fpcountr","text":"Parse data. ’re using different parsing function handles standard (endpoint) timecourse (kinetic) data Tecan Spark instruments running Magellan software. See Data Parsing article different setup. Arguments required: data_csv - file path absorbance data file metadata_csv - file path metadata file timeseries - whether data timeseries/timecourse/kinetic. Warnings expected: likely get warning NAs introduced coercion. just means empty wells filled NA values. Outputs produced: processed data file name [raw data filename]_parsed.csv (,example_fluorescence_parsed.csv), location data found. dataframe (called parsed_data) parsed data returned, can used inspect parsing. View fragment data frame check. Note fact data now Tidy Format, fluorescence reading (gains 40, 50, etc..) column, ready processing.","code":"parsed_data <- parse_magellan(data_csv = \"data/example_fluorescence.csv\",                               metadata_csv = \"conversion_factors/example_fluorescence_meta_joined.csv\",                               timeseries = FALSE ) ## 9 channel(s) identified. ## Channel 1: blueblue040. ## Channel 2: blueblue050. ## Channel 3: blueblue060. ## Channel 4: blueblue070. ## Channel 5: blueblue080. ## Channel 6: blueblue090. ## Channel 7: blueblue100. ## Channel 8: blueblue110. ## Channel 9: blueblue120. parsed_data[1:12,c(1,4,8,12,14:24)] # view a fragment of the dataframe"},{"path":"https://ec363.github.io/fpcountr/articles/fpcountr.html","id":"generate-conversion-factors","dir":"Articles","previous_headings":"Example Code > Conversion factor calculation","what":"2. Generate conversion factors","title":"fpcountr","text":"Use generate_cfs() generate conversion factors relates fluorescence brightness molecule number. Arguments required: calibration_csv - location parsed fluorescent data file subset_rows, rows_to_keep… - whether want function consider certain rows/columns data. useful multiple calibrants per plate, function can handle one calibrant time outfolder - save files Warnings expected: likely get warnings NaNs produced. normal. Outputs produced: ..designated outfolder (, conversion_factors/): processed data file name [raw data filename]_parsed_cfs.csv (,example_fluorescence_parsed_cfs.csv). Four plots showing showing fitting normalised fluorescence molecule number, gain vs conversion factor plot (tested multiple gains). .. RStudio: dataframe (called fp_conversion_factors) conversion factors concentration. Advanced options function, see ?generate_cfs(). Let’s check conversion factor table looks: , cf conversion factor residuals allows check quality fit. can see fits good, can also see looking plots:","code":"fp_conversion_factors <- generate_cfs(   calibration_csv = \"data/example_fluorescence_parsed.csv\",   subset_rows = TRUE, rows_to_keep = c(\"A\",\"B\"),   outfolder = \"conversion_factors\" ) ## Joining with `by = join_by(instrument, plate, seal, channel_name, channel_ex, ## channel_em, media, calibrant, measure)` fp_conversion_factors[,c(1,4,8:13)] # view a fragment of the dataframe"},{"path":[]},{"path":"https://ec363.github.io/fpcountr/articles/fpcountr.html","id":"fp-conversion-factors","dir":"Articles","previous_headings":"Example Code > Assemble conversion factors","what":"FP conversion factors","title":"fpcountr","text":"multiple FPs calibrated, assembly can used join various files together. just simplify conversion factor file move conversion factor folder.","code":"fp_conversion_factors <- read.csv(\"conversion_factors/example_fluorescence_parsed_cfs.csv\") fp_conversion_factors <- fp_conversion_factors |>   dplyr::select(instrument, plate, channel_name, media, calibrant, measure, gain, cf, beta) write.csv(fp_conversion_factors, \"conversion_factors/fp_conversion_factors_assembled.csv\",            row.names = FALSE)"},{"path":"https://ec363.github.io/fpcountr/articles/fpcountr.html","id":"od-conversion-factors","dir":"Articles","previous_headings":"Example Code > Assemble conversion factors","what":"OD conversion factors","title":"fpcountr","text":"can obtained according protocols FlopR package/paper. example calibration output provided example data. Let’s move conversion factors folder .","code":"od_conversion_factors <- read.csv(\"data/od_conversion_factors2.csv\") write.csv(od_conversion_factors, \"conversion_factors/od_conversion_factors_assembled.csv\",           row.names = FALSE) od_conversion_factors"},{"path":"https://ec363.github.io/fpcountr/articles/fpcountr.html","id":"processing-data-from-e--coli-fluorescent-protein-expression-experiments","dir":"Articles","previous_headings":"Example Code","what":"Processing data from E. coli fluorescent protein expression experiments","title":"fpcountr","text":"conversion factors mTagBFP2 fluorescence cell number (OD) hand, ready process experimental data.","code":""},{"path":"https://ec363.github.io/fpcountr/articles/fpcountr.html","id":"parse-data","dir":"Articles","previous_headings":"Example Code > Processing data from E. coli fluorescent protein expression experiments","what":"1. Parse data","title":"fpcountr","text":"First, parse, though time use timeseries = TRUE: Arguments required: data_csv - file path absorbance data file metadata_csv - file path metadata file timeseries - whether data timeseries/timecourse/kinetic. metadata_above - number lines plate reader-produced metadata exists data custom, startcol, insert_wells_above.. - use custom = TRUE data doesn’t occupy default columns 2 97. others specify data located. See ?parse_magellan(). Warnings expected: likely get warning NAs introduced coercion. just means empty wells filled NA values. Outputs produced: processed data file name [raw data filename]_parsed.csv (,example_experiment_parsed.csv), location data found. dataframe (called parsed_data) parsed data returned, can used inspect parsing. Note data consists two OD measurements two fluorescence measurements low high gain.","code":"parsed_data <- parse_magellan(   data_csv = \"data/example_experiment.csv\",   metadata_csv = \"data/example_experiment_meta.csv\",   timeseries = TRUE,   metadata_above = 1, # Well Positions   custom = TRUE, startcol = 3, endcol = 97, insert_wells_above = 0, insert_wells_below = 1 ) ## 4 channel(s) identified. ## 96 timepoints identified. ## 96 timepoints of 10 minutes = 960 minute (16 hour) timecourse. ## Channel 1: OD600. ## Channel 2: OD700. ## Channel 3: blue. ## Channel 4: bluelow. parsed_data[1:24,c(3,6:13)] # view a fragment of the dataframe"},{"path":"https://ec363.github.io/fpcountr/articles/fpcountr.html","id":"process-data","dir":"Articles","previous_headings":"Example Code > Processing data from E. coli fluorescent protein expression experiments","what":"2. Process data","title":"fpcountr","text":"Process experimental data using process_plate(). fairly involved function. Arguments required: data_csv - file path absorbance data file blank_well - location wells containing growth media timecourse - whether data timecourse/kinetic data (requires ‘time’ column) (TRUE/FALSE). See ‘Experiments II’ vignette. od_name - name column containing OD values. OD cell number measurements taken, use od_name = NULL. Fluorescence channel names: flu_channels - column names data represent fluorescence channel(s) flu_channels_rename - rename flu_channels columns , anything. can useful rename make sure experimental data columns match entries conversion factor table fluorescence channel/filter set. Quench correction: do_quench_correction - calculate corrected fluorescence values based cellular fluorescence quenching? od_type - OD taken 600 700 nm? Calibration parameters: do_calibrate - calibrate fluorescence OD values? instr - instrument name used experiment (matched calibrations) flu_slugs - short / lower-case form name FP (matched calibrations) flu_gains - gain used experiment (matched calibrations) flu_labels - label fluorescence axes plots Conversion factor data: od_coeffs_csv - file path OD conversion factor file fluor_coeffs_csv - file path fluorescence conversion factor file Background autofluorescence subtraction: af_model - sort autofluorescence model use. options include NULL, doesn’t use autofluorescence model instead normalises fluorescence blank wells time point. neg_well - wells cells FP use autofluorescence subtraction Saving: outfolder - save files Warnings expected: likely get warning rows containing missing values values outside scale range. normal. Outputs produced: ..designated outfolder (, experiment_analysis/): processed data file name [raw data filename]_parsed_processed.csv (,example_experiment_parsed_processed.csv). OD_1_raw_normalised - Raw normalised OD data. OD_2_pathlength-normalised - OD data normalised 1 cm path length (OD cm-1). OD_3_calibrated - Calibrated OD data (‘particles’ ‘cells’). blueblue_autofluorescence-normalisation-curve.pdf - Autofluorescence normalisation curve: background fluorescence non-fluorescent cells relates OD. mTagBFP2_1_raw_normalised - Raw normalised fluorescence data (‘relative fluorescence units’). mTagBFP2_2_quench-corrected - Fluorescence data corrected cell-based quenching (‘relative fluorescence units’). mTagBFP2_3_calibrated - Calibrated fluorescence data (molecules). .. RStudio: dataframe (called processed_data) conversion factors concentration. Advanced options function, see ?process_plate(). view fragment dataframe check : Note many new columns created process_plate().","code":"processed_data <- process_plate(   data_csv = \"data/example_experiment_parsed.csv\",   blank_well = c(\"A11\", \"B11\", \"C11\", \"D11\", \"E11\", \"F11\", \"G11\", \"H11\"),      # timecourse   timecourse = TRUE,      # od   od_name = \"OD700\",      # fluorescence labels   flu_channels = c(\"blue\"),   flu_channels_rename = c(\"blueblue\"),      # correction   do_quench_correction = TRUE,   od_type = \"OD700\",      # calibrations   do_calibrate = TRUE,   instr = \"spark1\",   flu_slugs = c(\"mTagBFP2\"),   flu_gains = c(60),   flu_labels = c(\"mTagBFP2\"),      # conversion factors   od_coeffs_csv = \"conversion_factors/od_conversion_factors_assembled.csv\",   fluor_coeffs_csv = \"conversion_factors/fp_conversion_factors_assembled.csv\",      # background autofluorescence subtraction   af_model = \"spline\",   neg_well = c(\"A2\", \"A3\", \"A4\", \"A5\", \"A6\", \"A7\"),      outfolder = \"experiment_analysis\" ) ## Calibrating OD700 channel with conversion factor 9.95e-10... ## Calibrating blueblue fluorescence channel with conversion factor 9.07e-11... processed_data[14:24,c(3,6,8,9,17:23)] # view a fragment of the dataframe"},{"path":"https://ec363.github.io/fpcountr/articles/fpcountr.html","id":"calculate-per-cell-values","dir":"Articles","previous_headings":"Example Code > Processing data from E. coli fluorescent protein expression experiments","what":"3. Calculate per cell values","title":"fpcountr","text":"calc_fppercell() can used estimate molecules per cell. Arguments required: data_csv - file path absorbance data file timecourse - whether data timecourse/kinetic data (requires ‘time’ column) (TRUE/FALSE). See ‘Experiments II’ vignette. flu_channels - column names data represent fluorescence channel(s) flu_labels - label fluorescence axes plots remove_wells - list wells leave analysis, e.g. contained media empty get_rfu_od - calculate relative fluorescence units per OD? (non calibrated data) get_mol_cell - calculate molecules per cell? (calibrated data) outfolder - save files Outputs produced: ..designated outfolder (, experiment_analysis/percell_data/): processed data file name [raw data filename]_parsed_processed_pc.csv (,example_experiment_parsed_processed_pc.csv). plot calibratedmTagBFP2_perCell.pdf summarise molecules per cell values. .. RStudio: dataframe (called pc_data_mTagBFP2) ‘per cell’ data. View fragment dataframe check : final timepoint, can see abundance mTagBFP2 samples range 50,000 300,000 molecules per cell.","code":"pc_data_mTagBFP2 <- calc_fppercell(   data_csv = \"experiment_analysis/example_experiment_parsed_processed.csv\",   timecourse = TRUE,   flu_channels = c(\"blueblue\"),   flu_labels = c(\"mTagBFP2\"),   remove_wells = c(\"A11\", \"B11\", \"C11\", \"D11\", \"E11\", \"F11\", \"G11\", \"H11\", # media                    \"A1\", \"B1\", \"C1\", \"D1\", \"E1\", \"F1\", \"G1\", \"H1\",                     \"A12\", \"B12\", \"C12\", \"D12\", \"E12\", \"F12\", \"G12\", \"H12\"), # empty wells   get_rfu_od = FALSE,   get_mol_cell = TRUE,   outfolder = \"experiment_analysis\" ) data_to_display <- pc_data_mTagBFP2 |>   dplyr::filter(time == max(pc_data_mTagBFP2$time)) |>   dplyr::select(plasmid, ara_pc, time, OD600, calibrated_OD, blueblue, calibrated_mTagBFP2, calibratedmTagBFP2_perCell) data_to_display[c(13:15,19:21,25:27,31:33),]"},{"path":"https://ec363.github.io/fpcountr/articles/fpcountr.html","id":"calculate-cellular-concentration","dir":"Articles","previous_headings":"Example Code > Processing data from E. coli fluorescent protein expression experiments","what":"4. Calculate cellular concentration","title":"fpcountr","text":"calc_fpconc() can used estimate molecular concentration. somewhat similar structure . Arguments required: data_csv - file path absorbance data file timecourse - whether data timecourse/kinetic data (requires ‘time’ column) (TRUE/FALSE). See ‘Experiments II’ vignette. flu_channels - column names data represent fluorescence channel(s) flu_labels - label fluorescence axes plots remove_wells - list wells leave analysis, e.g. contained media empty get_rfu_vol - calculate relative fluorescence units per volume? (non calibrated data) get_mol_vol - calculate molecules per volume (.e. molar concentration)? (calibrated data) od_specific_total_volume - OD600-specific total cellular volume ul x OD-1 x cm, .e. total cellular volume represented 1 OD600 unit (1 cm path length). Recommended value 3.6. odmeasure - OD measurement used data? e.g. “OD600” “OD700”. odmeasure_conversion - convert measurement specified odmeasure OD600? .e. OD600 = OD used / x. Use ‘1’ OD600 (conversion) 0.79 OD700. outfolder - save files Outputs produced: ..designated outfolder (, experiment_analysis/molar_data/): processed data file name [raw data filename]_parsed_processed_conc.csv (,example_experiment_parsed_processed_con.csv). plot calibrated_mTagBFP2_concentration.pdf summarise protein concentration values. .. RStudio: dataframe (called molar_data_mTagBFP2) ‘per cell’ data. View fragment dataframe check : Concentration values estimated 10-70 uM.    files can used analyse data absolute quantities… Note arbitrary values suggest nothing mTagBFP2 abundance likely effect cell, since values biologically meaningless. Absolute values, however, allow us compare mTagBFP2 levels cellular context. example, high arabinose concentrations, vector effectively overproduces proteins levels higher abundant native proteins E. coli cell, 20% proteome.","code":"molar_data_mTagBFP2 <- calc_fpconc(   data_csv = \"experiment_analysis/example_experiment_parsed_processed.csv\",   timecourse = TRUE,   flu_channels = c(\"blueblue\"),   flu_labels = c(\"mTagBFP2\"),   remove_wells = c(\"A11\", \"B11\", \"C11\", \"D11\", \"E11\", \"F11\", \"G11\", \"H11\", # media                    \"A1\", \"B1\", \"C1\", \"D1\", \"E1\", \"F1\", \"G1\", \"H1\",                     \"A12\", \"B12\", \"C12\", \"D12\", \"E12\", \"F12\", \"G12\", \"H12\"), # empty wells   get_rfu_vol = FALSE,   get_mol_vol = TRUE,      od_specific_total_volume = 3.6,   odmeasure = \"OD700\",   odmeasure_conversion = 0.79,      outfolder = \"experiment_analysis\" ) ## Note that the default 'OD-specific total volume' is 3.6 ul per (OD600 cm-1) - and requires measurement in OD600 or a conversion to estimate OD600 from the OD used. ## Using OD-specific total cell volume: 3.6ul per (OD600 cm-1). ## The empirical ratio between E. coli absorbance at OD700/OD600 is typically 0.79. ## Using OD: OD700. ## Using conversion: 0.79. data_to_display <- molar_data_mTagBFP2 |>   dplyr::filter(time == max(molar_data_mTagBFP2$time)) |>   dplyr::select(plasmid, ara_pc, time, OD700, calibrated_OD, blueblue, calibrated_mTagBFP2, calibrated_mTagBFP2_Molar) data_to_display[c(13:15,19:21,25:27,31:33),]"},{"path":"https://ec363.github.io/fpcountr/articles/fpcountr.html","id":"further-information","dir":"Articles","previous_headings":"","what":"Further information","title":"fpcountr","text":"paper covers purpose structure functions detail. overview functions - Supplementary Fig. 13 process_absorbance_spectrum() (originally plot_absorbance_spectrum()) - Supplementary Fig. 6 path length correction - Supplementary Fig. 4 get_conc_ecmax() (originally get_conc_ECmax()) - Supplementary Fig. 8 generate_cfs() - Fig.3 Supplementary Fig. 3 microsphere calibrations - Supplementary Fig. 11 process_plate() - Fig. 4-5 calc_fppercell() calc_fpconc() - Fig. 5","code":""},{"path":"https://ec363.github.io/fpcountr/articles/path_lengths.html","id":"estimating-path-length","dir":"Articles","previous_headings":"","what":"Estimating Path Length","title":"Path Lengths","text":"2 methods estimating path length fpcountr. first relies measurements within absorbance data, second relies sample’s volume.","code":""},{"path":"https://ec363.github.io/fpcountr/articles/path_lengths.html","id":"estimating-path-length-using-infrared-wavelengths-k-factors","dir":"Articles","previous_headings":"Estimating Path Length","what":"(1) Estimating Path Length Using Infrared Wavelengths (K-Factors)","title":"Path Lengths","text":"path length sample well may estimated absorbance readings infrared range, k-factor buffer temperature. k-factor aqueous buffer observed difference absorbance 975 nm absorbance 900 nm. path length sample may estimated taking ratio measured k-factor sample vs known k-factor buffer 1cm path length. Therefore, order calculate path lengths, need: known k-factor buffer 1cm path length: reference dataset k-factors range buffers measured k-factor sample: data sample absorbance 900-975nm, information identity buffer used, concentration, temperature assay","code":""},{"path":"https://ec363.github.io/fpcountr/articles/path_lengths.html","id":"reference-k-factors-dataset","dir":"Articles","previous_headings":"Estimating Path Length > (1) Estimating Path Length Using Infrared Wavelengths (K-Factors)","what":"Reference k-factors dataset","title":"Path Lengths","text":"fpcountr uses reference datasets Thermo Fisher. first dataset k-factors range buffers: Notice buffers represented need pick closest match. calibrations, used buffer consisting 5 mM Tris 15 mM NaCl, chose buffer_used = \"TBS\" concentration_used = 0.005 (M). second lists k-factor changes temperature: Run view_kfactors() function () get datasets printed console. Use help decide add buffer_used units use concentration_used.","code":""},{"path":"https://ec363.github.io/fpcountr/articles/path_lengths.html","id":"when-to-use-calc_each-vs-calc_blanks","dir":"Articles","previous_headings":"Estimating Path Length > (1) Estimating Path Length Using Infrared Wavelengths (K-Factors)","what":"When to use \"calc_each\" vs \"calc_blanks\"","title":"Path Lengths","text":"request path length calculation via method two options: Use pl_method = \"calc_each\" estimate pathlength well individually. Use pl_method = \"calc_blanks\" estimate pathlength wells average blank wells. usually recommended.","code":""},{"path":"https://ec363.github.io/fpcountr/articles/path_lengths.html","id":"estimating-path-length-using-sample-volume","dir":"Articles","previous_headings":"Estimating Path Length","what":"(2) Estimating Path Length Using Sample Volume","title":"Path Lengths","text":"request path length estimation via volume, use pl_method = \"volume\". volume method calculates path length using reference experiment microplate filled specified volumes water (50-300 ul), path lengths measured fitted linear model.","code":""},{"path":"https://ec363.github.io/fpcountr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eszter Csibra. Author, maintainer.","code":""},{"path":"https://ec363.github.io/fpcountr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Csibra E, Guy-Bart S (2022). “Absolute protein quantification using fluorescence measurements FPCountR.” Nature Communications, 13(1), 6600. doi:10.1038/s41467-022-34232-6, https://www.nature.com/articles/s41467-022-34232-6. Csibra E (2021). fpcountr: Fluorescent protein calibration plate readers. doi:10.5281/zenodo.5760027, R package, https://github.com/ec363/fpcountr, https://ec363.github.io/fpcountr/.","code":"@Article{paper,   title = {Absolute protein quantification using fluorescence measurements with {FPCountR}},   author = {Eszter Csibra and Stan Guy-Bart},   journal = {Nature Communications},   year = {2022},   volume = {13},   number = {1},   pages = {6600},   doi = {10.1038/s41467-022-34232-6},   url = {https://www.nature.com/articles/s41467-022-34232-6}, } @Manual{package,   title = {fpcountr: Fluorescent protein calibration for plate readers},   author = {Eszter Csibra},   year = {2021},   note = {R package, https://github.com/ec363/fpcountr},   url = {https://ec363.github.io/fpcountr/},   doi = {10.5281/zenodo.5760027}, }"},{"path":"https://ec363.github.io/fpcountr/index.html","id":"fpcountr-fluorescent-protein-calibration-for-plate-readers-","dir":"","previous_headings":"","what":"FPCountR: Fluorescent protein calibration for plate readers","title":"Fluorescent Protein Calibration For Plate Readers","text":"FPCountR enables calibration microplate readers using fluorescent protein calibrants synthetic molecular biology applications. Background: Protein levels may quantified fluorescence fluorescent protein (‘FP’) used reporter. Microplate readers enable quantification FP levels high-throughput using multi-well (e.g. 96-well 384-well) plates, well monitoring FP expression kinetics time. long recognised arbitrary units produced instruments prevents comparison experimental results different instruments laboratories, instrument calibration solution. However, existing calibrants consist small molecule fluorophores like fluorescein, allow conversion units fluorophore (expressed ‘molecules equivalent fluorescein’ MEF/L), rather units protein (e.g. ‘100 proteins per cell’, ‘100 nM protein’). , need use FPs calibrants. FPCountR aims describe simple accurate way generate fluorescent protein calibrants enable extraction absolute protein units plate reader experiments. method described detail paper, ‘Absolute protein quantification using fluorescence measurements FPCountR’, available open access Nature Communications. --date version experimental protocol can found Supplementary Note 5 paper protocols.io. corresponding analytical software package available GitHub. complete mathematical description analytical workflow carried software can also found Supplementary Note 6 paper.","code":""},{"path":"https://ec363.github.io/fpcountr/index.html","id":"overview-of-the-package","dir":"","previous_headings":"","what":"Overview of the package","title":"Fluorescent Protein Calibration For Plate Readers","text":"order calibrate plate reader, users need prepare dilution series calibrants consisting FP requires quantification. FP dilution series used calculate conversion factor ‘relative fluorescence units’/molecules (RFU/molecules) quantifying (1) concentration FP dilution, (2) fluorescence activity dilution. assays processed functions illustrated : first, extract protein concentrations assay (1), second use concentration fluorescence assay data calculate conversion factor. Finally, experimental data, typical E. coli assay synthetic gene circuits monitored cell growth time, can processed convert units (example) mCherry RFU RFU/OD, units ‘molecules’ ‘molecules per cell’ (molar concentration).","code":""},{"path":"https://ec363.github.io/fpcountr/index.html","id":"further-details-about-package-functions","dir":"","previous_headings":"","what":"Further details about package functions","title":"Fluorescent Protein Calibration For Plate Readers","text":"simplified overview. package can handle multiple types protein assay data (1) functions (get_conc_bca bicinchoninic acid (BCA) assay, get_conc_a280 A280 assay get_conc_ecmax ECmax), though ECmax assay strongly recommended. , processed data produced process_plate() (3) processed either calc_fppercell (obtain protein levels molecules per cell), calc_fpconc (obtain protein levels molar concentration). -depth diagram package functions, see Supplementary Fig. 15 paper. complete function reference can found package website description function can found installation ?function_name.","code":""},{"path":"https://ec363.github.io/fpcountr/index.html","id":"parser-functions","dir":"","previous_headings":"","what":"Parser functions","title":"Fluorescent Protein Calibration For Plate Readers","text":"Users note raw data exported plate readers unlikely correct format downstream data processing. Therefore, raw data set requires ‘parsing’: includes data extraction, data cleaning, data tidying, joining data relevant metadata saving CSV format. parse designations figure refer functions. package includes parser functions data formats exported Tecan Spark plate reader running Magellan software.","code":""},{"path":"https://ec363.github.io/fpcountr/index.html","id":"related-packages","dir":"","previous_headings":"","what":"Related packages","title":"Fluorescent Protein Calibration For Plate Readers","text":"generate_cfs process_plate functions based functions FlopR package, developed calibration plate readers using microsphere fluorescein calibrants. framework splits data parsing data processing separate functions also inspired package. description FlopR, see package webpage. full explanation parser functions work, see one written FlopR users .","code":""},{"path":"https://ec363.github.io/fpcountr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fluorescent Protein Calibration For Plate Readers","text":"package can installed straight GitHub:","code":"# install.packages(\"devtools\") devtools::install_github(\"ec363/fpcountr\")"},{"path":"https://ec363.github.io/fpcountr/index.html","id":"how-to-use-fpcountr-a-fully-worked-example","dir":"","previous_headings":"","what":"How to use FPCountR: a fully worked example","title":"Fluorescent Protein Calibration For Plate Readers","text":"guide getting started, including fully worked example installation calibration experiment analysis, see vignette FPCountR package website.","code":""},{"path":"https://ec363.github.io/fpcountr/index.html","id":"citing-fpcountr","dir":"","previous_headings":"","what":"Citing FPCountR","title":"Fluorescent Protein Calibration For Plate Readers","text":"use package find helpful, ’d grateful cite paper package manuscript. Csibra E Stan GB. 2022. Absolute protein quantification using fluorescence measurements FPCountR. Nat Commun 13, 6600. doi: 10.1038/s41467-022-34232-6 Csibra E. 2021. FPCountR: Fluorescent protein calibration plate readers. R package. doi: 10.5281/zenodo.5760028 GitHub page: https://github.com/ec363/fpcountr","code":""},{"path":"https://ec363.github.io/fpcountr/reference/aa_mass_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Amino acid masses — aa_mass_data","title":"Amino acid masses — aa_mass_data","text":"dataset containing masses amino acids.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/aa_mass_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Amino acid masses — aa_mass_data","text":"","code":"aa_mass_data"},{"path":"https://ec363.github.io/fpcountr/reference/aa_mass_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Amino acid masses — aa_mass_data","text":"data frame 22 rows 5 variables: amino.acid amino acid name X1.letter.code amino acid 1-letter code format X3.letter.code amino acid 3-letter code format monoisotopic monoisotopic mass, Da average average mass, Da","code":""},{"path":"https://ec363.github.io/fpcountr/reference/aa_mass_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Amino acid masses — aa_mass_data","text":"https://web.expasy.org/findmod/findmod_masses.html#AA","code":""},{"path":"https://ec363.github.io/fpcountr/reference/calc_fpconc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate FP concentration in molar units — calc_fpconc","title":"Calculate FP concentration in molar units — calc_fpconc","text":"Takes input plate reader data processed process_plate() uses normalised/calibrated values calculate FP concentration. Adds column(s) FP concentration either: () normalisedFP/cellvolume (RFU/L), (b) calibratedFP/cellvolume (moles/L, M). Plots results returns dataframe.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/calc_fpconc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate FP concentration in molar units — calc_fpconc","text":"","code":"calc_fpconc(   data_csv,   timecourse = TRUE,   flu_channels,   flu_labels,   remove_wells,   get_rfu_vol = TRUE,   get_mol_vol = FALSE,   od_specific_total_volume = NULL,   odmeasure = NULL,   odmeasure_conversion = NULL,   plate_type = 96,   outfolder = \".\" )"},{"path":"https://ec363.github.io/fpcountr/reference/calc_fpconc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate FP concentration in molar units — calc_fpconc","text":"data_csv path CSV file containing processed plate reader data timecourse logical. data timecourse/kinetic data include variable called time? flu_channels column names NORMALISED fluorescence data flu_labels column names CALIBRATED fluorescence data remove_wells list coordinates wells removed analysis (e.g. empty wells) get_rfu_vol logical. TRUE, uses normalised_FP OD-specific cell volume (od_specific_total_volume, specified ul) calculate FP concentration FP/cellvolume relative fluorescence units/litre (RFU/L). get_mol_vol logical. TRUE, uses calibrated_FP OD-specific cell volume (od_specific_total_volume, specified ul) calculate FP concentration moles/L Molar (M) units. od_specific_total_volume numeric. OD600-specific total cellular volume ul x OD-1 x cm, .e. total cellular volume represented 1 OD600 unit (1 cm path length). Recommended value 3.6 Volkmer et al., 2011. odmeasure character. OD measurement used data? Specifically, measurement represented 'normalised_OD_cm1' column? e.g. \"OD600\" \"OD700\". Purpose record table. odmeasure_conversion numeric. convert measurement specified odmeasure OD600? .e. OD600 = OD used / x. Use '1' OD600 (conversion) 0.79 OD700. plate_type type plate. numeric, .e. '96' 96-well plate. Defines rows columns used plotting figures. Defaults '96'. outfolder path folder output files saved. Defaults current working directory.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/calc_fpconc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate FP concentration in molar units — calc_fpconc","text":"data.frame columns FP/cell calculation","code":""},{"path":"https://ec363.github.io/fpcountr/reference/calc_fpconc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate FP concentration in molar units — calc_fpconc","text":"","code":"if (FALSE) { conc_data_mCherry <- calc_fpconc(   data_csv = \"mcherry_parsed_processed.csv\",   flu_channels = c(\"red1red1\"), flu_labels = c(\"mCherry\"),   remove_wells = c(\"A11\"),   get_rfu_vol = TRUE, get_mol_vol = TRUE,   od_specific_total_volume = 3.6, odmeasure = \"OD700\", odmeasure_conversion = 0.79,   outfolder = file.path(\"plots\")) }"},{"path":"https://ec363.github.io/fpcountr/reference/calc_fppercell.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate FP per cell values — calc_fppercell","title":"Calculate FP per cell values — calc_fppercell","text":"Takes input plate reader data processed process_plate() uses normalised/calibrated values calculate per-cell values. Adds column(s) FP/cell either: () normalisedFP/normalisedOD (RFU/OD), (b) calibratedFP/calibratedOD (molecules/cell). Plots results returns dataframe. Note technically, units molecules 'molecules equivalent FP' cells 'particles equivalent microspheres'.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/calc_fppercell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate FP per cell values — calc_fppercell","text":"","code":"calc_fppercell(   data_csv,   timecourse = TRUE,   flu_channels,   flu_labels,   remove_wells,   get_rfu_od = TRUE,   get_mol_cell = FALSE,   plate_type = 96,   outfolder = \".\" )"},{"path":"https://ec363.github.io/fpcountr/reference/calc_fppercell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate FP per cell values — calc_fppercell","text":"data_csv path CSV file containing processed plate reader data timecourse logical. data timecourse/kinetic data include variable called 'time'? flu_channels column names NORMALISED fluorescence data flu_labels column names CALIBRATED fluorescence data remove_wells list coordinates wells removed analysis (e.g. empty wells) get_rfu_od logical. TRUE, uses normalised_FP normalised_OD calculate FP per cell FP/OD relative fluorescence units/relative OD (RFU/OD). get_mol_cell logical. TRUE, uses calibrated_FP calibrated_OD calculate FP per cell FP/OD relative fluorescence units/relative OD (molecules/cell). plate_type type plate. numeric, .e. '96' 96-well plate. Defines rows columns used plotting figures. Defaults '96'. outfolder path folder output files saved. Defaults current working directory.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/calc_fppercell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate FP per cell values — calc_fppercell","text":"data.frame columns FP/cell calculation","code":""},{"path":"https://ec363.github.io/fpcountr/reference/calc_fppercell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate FP per cell values — calc_fppercell","text":"","code":"if (FALSE) {   pc_data_mCherry <- calc_fppercell(     data_csv = \"mcherry_parsed_processed.csv\",     flu_channels = c(\"red1red1\"), flu_labels = c(\"mCherry\"),     remove_wells = c(\"A11\"),     get_rfu_od = TRUE, get_mol_cell = TRUE,     outfolder = file.path(\"plots\")   ) }"},{"path":"https://ec363.github.io/fpcountr/reference/calibrate_flu.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert arbitrary fluorescence units to calibrated units — calibrate_flu","title":"Convert arbitrary fluorescence units to calibrated units — calibrate_flu","text":"Used process_plate function fluorescence calibration. Function adds calibrated fluorescence column data, returned. Originally based flopr::calibrate_flu, multiple changes. list arguments added allow selection required conversion factor table may include conversion factors multiple instruments, FPs, etc., function now includes error checks report user conversion factors missing.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/calibrate_flu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert arbitrary fluorescence units to calibrated units — calibrate_flu","text":"","code":"calibrate_flu(   pr_data,   flu_instr,   flu_channel,   flu_gain,   flu_slug,   flu_label,   do_quench_correction = do_quench_correction,   conversion_factors_csv )"},{"path":"https://ec363.github.io/fpcountr/reference/calibrate_flu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert arbitrary fluorescence units to calibrated units — calibrate_flu","text":"pr_data data.frame parsed plate reader data flu_instr instrument name flu_channel fluorescent channel name flu_gain gain flu_slug name fluorescent protein FPbase slug format conversion_factors_csv path CSV file containing predicted conversion factors fluorescent channels","code":""},{"path":"https://ec363.github.io/fpcountr/reference/calibrate_flu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert arbitrary fluorescence units to calibrated units — calibrate_flu","text":"updated data.frame additional column calibrated fluorescence","code":""},{"path":"https://ec363.github.io/fpcountr/reference/calibrate_od.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert arbitrary optical density units to calibrated units — calibrate_od","title":"Convert arbitrary optical density units to calibrated units — calibrate_od","text":"Used process_plate function optical density calibration. Function adds calibrated_OD column data, returned. Originally based flopr::calibrate_od, except instr argument added allow selection conversion factor table may include multiple instruments, includes error checks report user conversion factors missing.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/calibrate_od.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert arbitrary optical density units to calibrated units — calibrate_od","text":"","code":"calibrate_od(pr_data, od_name, instr, conversion_factors_csv)"},{"path":"https://ec363.github.io/fpcountr/reference/calibrate_od.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert arbitrary optical density units to calibrated units — calibrate_od","text":"pr_data dataframe parsed plate reader data od_name column name optical density data instr character string represent instrument. do_calibrate = TRUE, used filtering od_coeffs_csv fluor_coeffs_csv files conversion factors relevant instrument. conversion_factors_csv path CSV file containing conversion factors optical density","code":""},{"path":"https://ec363.github.io/fpcountr/reference/calibrate_od.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert arbitrary optical density units to calibrated units — calibrate_od","text":"updated data.frame additional column calibrated OD","code":""},{"path":"https://ec363.github.io/fpcountr/reference/cell_quench_data.html","id":null,"dir":"Reference","previous_headings":"","what":"cell quench data — cell_quench_data","title":"cell quench data — cell_quench_data","text":"table containing experimental data informing cells quench fluorescence E. coli cells.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/cell_quench_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cell quench data — cell_quench_data","text":"","code":"cell_quench_data"},{"path":"https://ec363.github.io/fpcountr/reference/cell_quench_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"cell quench data — cell_quench_data","text":"data frame 34 rows 12 variables: channel_name name filter set used channel_ex excitation filter channel_em emission filter media media calibrant calibrant protein protein cells_od600 accurate OD600 cm-1 values cells_od700 accurate OD700 cm-1 values volume volume ul measure filter set plus gain gain gain autof_norm_value fluorescence values normalised remove contribution cellular autofluorescence norm_fc_value fold change fluorescence sample relevant negative control without cells","code":""},{"path":"https://ec363.github.io/fpcountr/reference/correct_flu.html","id":null,"dir":"Reference","previous_headings":"","what":"Correct normalised fluorescence to compensate for cellular quenching effects — correct_flu","title":"Correct normalised fluorescence to compensate for cellular quenching effects — correct_flu","text":"Used process_plate function cell quench correction. presence cells, particularly high densities, can 'quench' fluorescence fluorescence readings lower expected equivalent FP concentration vitro. function compensates effect using empirical data relates fold decrease fluorescence expected, given certain cell density.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/correct_flu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correct normalised fluorescence to compensate for cellular quenching effects — correct_flu","text":"","code":"correct_flu(pr_data, od_type, flu_channel)"},{"path":"https://ec363.github.io/fpcountr/reference/correct_flu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correct normalised fluorescence to compensate for cellular quenching effects — correct_flu","text":"pr_data data.frame parsed plate reader data od_type OD-type used? Required quench correction. \"OD600\" \"OD700\". flu_channel fluorescent channel name","code":""},{"path":"https://ec363.github.io/fpcountr/reference/correct_flu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correct normalised fluorescence to compensate for cellular quenching effects — correct_flu","text":"updated data.frame additional column corrected fluorescence","code":""},{"path":"https://ec363.github.io/fpcountr/reference/find_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Find columns of a given plate type — find_columns","title":"Find columns of a given plate type — find_columns","text":"Internal function.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/find_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find columns of a given plate type — find_columns","text":"","code":"find_columns(plate_type = 96, quiet = FALSE)"},{"path":"https://ec363.github.io/fpcountr/reference/find_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find columns of a given plate type — find_columns","text":"plate_type type plate. numeric, .e. 96 96-well plate. quiet logical. function print warning plate size unusual?","code":""},{"path":"https://ec363.github.io/fpcountr/reference/find_plate_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Find row and column configuration of a given plate type — find_plate_format","title":"Find row and column configuration of a given plate type — find_plate_format","text":"Internal function.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/find_plate_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find row and column configuration of a given plate type — find_plate_format","text":"","code":"find_plate_format(plate_type, quiet = FALSE)"},{"path":"https://ec363.github.io/fpcountr/reference/find_plate_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find row and column configuration of a given plate type — find_plate_format","text":"plate_type type plate. numeric, .e. 96 96-well plate. quiet logical. function print warning plate size unusual?","code":""},{"path":"https://ec363.github.io/fpcountr/reference/find_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Find rows of a given plate type — find_rows","title":"Find rows of a given plate type — find_rows","text":"Internal function.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/find_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find rows of a given plate type — find_rows","text":"","code":"find_rows(plate_type = 96, quiet = FALSE)"},{"path":"https://ec363.github.io/fpcountr/reference/find_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find rows of a given plate type — find_rows","text":"plate_type type plate. numeric, .e. 96 96-well plate. quiet logical. function print warning plate size unusual?","code":""},{"path":"https://ec363.github.io/fpcountr/reference/find_wells.html","id":null,"dir":"Reference","previous_headings":"","what":"Find wells of a given plate format — find_wells","title":"Find wells of a given plate format — find_wells","text":"Works wells plate type returns list.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/find_wells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find wells of a given plate format — find_wells","text":"","code":"find_wells(plate_type = 96)"},{"path":"https://ec363.github.io/fpcountr/reference/find_wells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find wells of a given plate format — find_wells","text":"plate_type type plate. numeric, .e. 96 96-well plate.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/find_wells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find wells of a given plate format — find_wells","text":"list containing names wells specified plate","code":""},{"path":"https://ec363.github.io/fpcountr/reference/find_wells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find wells of a given plate format — find_wells","text":"","code":"find_wells(96) #>  [1] \"A1\"  \"A2\"  \"A3\"  \"A4\"  \"A5\"  \"A6\"  \"A7\"  \"A8\"  \"A9\"  \"A10\" \"A11\" \"A12\" #> [13] \"B1\"  \"B2\"  \"B3\"  \"B4\"  \"B5\"  \"B6\"  \"B7\"  \"B8\"  \"B9\"  \"B10\" \"B11\" \"B12\" #> [25] \"C1\"  \"C2\"  \"C3\"  \"C4\"  \"C5\"  \"C6\"  \"C7\"  \"C8\"  \"C9\"  \"C10\" \"C11\" \"C12\" #> [37] \"D1\"  \"D2\"  \"D3\"  \"D4\"  \"D5\"  \"D6\"  \"D7\"  \"D8\"  \"D9\"  \"D10\" \"D11\" \"D12\" #> [49] \"E1\"  \"E2\"  \"E3\"  \"E4\"  \"E5\"  \"E6\"  \"E7\"  \"E8\"  \"E9\"  \"E10\" \"E11\" \"E12\" #> [61] \"F1\"  \"F2\"  \"F3\"  \"F4\"  \"F5\"  \"F6\"  \"F7\"  \"F8\"  \"F9\"  \"F10\" \"F11\" \"F12\" #> [73] \"G1\"  \"G2\"  \"G3\"  \"G4\"  \"G5\"  \"G6\"  \"G7\"  \"G8\"  \"G9\"  \"G10\" \"G11\" \"G12\" #> [85] \"H1\"  \"H2\"  \"H3\"  \"H4\"  \"H5\"  \"H6\"  \"H7\"  \"H8\"  \"H9\"  \"H10\" \"H11\" \"H12\"   find_wells(24) #>  [1] \"A1\" \"A2\" \"A3\" \"A4\" \"A5\" \"A6\" \"B1\" \"B2\" \"B3\" \"B4\" \"B5\" \"B6\" \"C1\" \"C2\" \"C3\" #> [16] \"C4\" \"C5\" \"C6\" \"D1\" \"D2\" \"D3\" \"D4\" \"D5\" \"D6\""},{"path":"https://ec363.github.io/fpcountr/reference/find_wells_in_column.html","id":null,"dir":"Reference","previous_headings":"","what":"List of all wells in a specific column of a given plate type — find_wells_in_column","title":"List of all wells in a specific column of a given plate type — find_wells_in_column","text":"List wells specific column given plate type","code":""},{"path":"https://ec363.github.io/fpcountr/reference/find_wells_in_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of all wells in a specific column of a given plate type — find_wells_in_column","text":"","code":"find_wells_in_column(columns, plate_type = 96)"},{"path":"https://ec363.github.io/fpcountr/reference/find_wells_in_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of all wells in a specific column of a given plate type — find_wells_in_column","text":"columns number list numbers, representing column(s) 1 12. character strings also accepted. plate_type type plate. numeric, .e. 96 96-well plate.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/find_wells_in_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of all wells in a specific column of a given plate type — find_wells_in_column","text":"list containing names wells specified column(s) specified plate","code":""},{"path":"https://ec363.github.io/fpcountr/reference/find_wells_in_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of all wells in a specific column of a given plate type — find_wells_in_column","text":"","code":"find_wells_in_column(\"1\") #> [1] \"A1\" \"B1\" \"C1\" \"D1\" \"E1\" \"F1\" \"G1\" \"H1\"  find_wells_in_column(\"12\") #> [1] \"A12\" \"B12\" \"C12\" \"D12\" \"E12\" \"F12\" \"G12\" \"H12\"  find_wells_in_column(1) #> [1] \"A1\" \"B1\" \"C1\" \"D1\" \"E1\" \"F1\" \"G1\" \"H1\"  find_wells_in_column(c(1,3), plate_type = 6) #> [1] \"A1\" \"A3\" \"B1\" \"B3\""},{"path":"https://ec363.github.io/fpcountr/reference/find_wells_in_row.html","id":null,"dir":"Reference","previous_headings":"","what":"List of all wells in a specific row of a given plate type — find_wells_in_row","title":"List of all wells in a specific row of a given plate type — find_wells_in_row","text":"List wells specific row given plate type","code":""},{"path":"https://ec363.github.io/fpcountr/reference/find_wells_in_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of all wells in a specific row of a given plate type — find_wells_in_row","text":"","code":"find_wells_in_row(rows, plate_type = 96)"},{"path":"https://ec363.github.io/fpcountr/reference/find_wells_in_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of all wells in a specific row of a given plate type — find_wells_in_row","text":"rows character string, list character strings, representing row(s) \"\" \"H\" plate_type type plate. numeric, .e. 96 96-well plate.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/find_wells_in_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of all wells in a specific row of a given plate type — find_wells_in_row","text":"list containing names wells specified row(s) specified plate","code":""},{"path":"https://ec363.github.io/fpcountr/reference/find_wells_in_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of all wells in a specific row of a given plate type — find_wells_in_row","text":"","code":"find_wells_in_row(\"A\") #>  [1] \"A1\"  \"A2\"  \"A3\"  \"A4\"  \"A5\"  \"A6\"  \"A7\"  \"A8\"  \"A9\"  \"A10\" \"A11\" \"A12\"  find_wells_in_row(c(\"A\",\"D\"), plate_type = 24) #>  [1] \"A1\" \"A2\" \"A3\" \"A4\" \"A5\" \"A6\" \"D1\" \"D2\" \"D3\" \"D4\" \"D5\" \"D6\""},{"path":"https://ec363.github.io/fpcountr/reference/find_wells_in_rowcolumn.html","id":null,"dir":"Reference","previous_headings":"","what":"List of all wells in specific rows and columns of a given plate type — find_wells_in_rowcolumn","title":"List of all wells in specific rows and columns of a given plate type — find_wells_in_rowcolumn","text":"List wells specific rows columns given plate type","code":""},{"path":"https://ec363.github.io/fpcountr/reference/find_wells_in_rowcolumn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of all wells in specific rows and columns of a given plate type — find_wells_in_rowcolumn","text":"","code":"find_wells_in_rowcolumn(rows, columns, plate_type = 96)"},{"path":"https://ec363.github.io/fpcountr/reference/find_wells_in_rowcolumn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of all wells in specific rows and columns of a given plate type — find_wells_in_rowcolumn","text":"rows character string, list character strings, representing row(s) \"\" \"H\" columns number list numbers, representing column(s) 1 12. character strings also accepted. plate_type type plate. numeric, .e. 96 96-well plate.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/find_wells_in_rowcolumn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of all wells in specific rows and columns of a given plate type — find_wells_in_rowcolumn","text":"list containing names wells specified row(s) column(s) specified plate","code":""},{"path":"https://ec363.github.io/fpcountr/reference/find_wells_in_rowcolumn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of all wells in specific rows and columns of a given plate type — find_wells_in_rowcolumn","text":"","code":"find_wells_in_rowcolumn(c(\"A\",\"C\"), c(2,3)) #> [1] \"A2\" \"A3\" \"C2\" \"C3\"  find_wells_in_rowcolumn(c(\"A\",\"C\"), c(2,3), plate_type = 24) #> [1] \"A2\" \"A3\" \"C2\" \"C3\""},{"path":"https://ec363.github.io/fpcountr/reference/fpbase_data.html","id":null,"dir":"Reference","previous_headings":"","what":"fluorescent protein properties from fpbase — fpbase_data","title":"fluorescent protein properties from fpbase — fpbase_data","text":"dataset containing properties 'basic' (single fluorescent state) fluorescent proteins fpbase database (downloaded 2022.10.04).","code":""},{"path":"https://ec363.github.io/fpcountr/reference/fpbase_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fluorescent protein properties from fpbase — fpbase_data","text":"","code":"fpbase_data"},{"path":"https://ec363.github.io/fpcountr/reference/fpbase_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"fluorescent protein properties from fpbase — fpbase_data","text":"data frame 593 rows 16 variables: url FPbase url name name stokes Stokes shift (nm) slug slug - lower case name used url ipg_id Identical Protein Group ID Pubmed agg oligomerisation state ex_max wavelength excitation peak (nm) em_max wavelength emission peak (nm) ext_coeff excitation coefficient (EC, M-1cm-1) qy quantum yield pka pKa brightness brightness bleach rate photobleaching/photostability (s) maturation maturation half time (min) lifetime fluorescence lifetime (ns) cofactor cofactor required fluorescence ()","code":""},{"path":"https://ec363.github.io/fpcountr/reference/fpbase_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"fluorescent protein properties from fpbase — fpbase_data","text":"https://www.fpbase.org/api/proteins/basic/?format=json","code":""},{"path":"https://ec363.github.io/fpcountr/reference/generate_cfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate conversion factors for FP calibrations — generate_cfs","title":"Generate conversion factors for FP calibrations — generate_cfs","text":"Generate conversion factors fluorescent protein (FP) calibrations. Originally based flopr::generate_cfs() numerous changes. original function intended fluorescein microsphere calibrations, whereas one can used fluorescent calibrant, including proteins. Takes input parsed CSV fluorescence data dilution series FPs one gains, contains data metadata columns (including: instrument, plate, seal, channel_name, channel_ex, channel_em, media, calibrant, protein, replicate, volume, mw_gmol1, concentration_ngul, well, columns fluorescence data, row, column). number arguments allow tweaking original data set. Following , data reshaped, normalised, trimmed saturated points, summarised used fit model conversion factors arbitrary absolute units. Optional extras: sensitivity_plots argument extends analysis identify limits detection relative sensitivity dynamic range gain. Plots saved record processed data every step, allowing visual sanity checks troubleshooting. CSV file fitted conversion factors saved (along processed data requested more_csvs).","code":""},{"path":"https://ec363.github.io/fpcountr/reference/generate_cfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate conversion factors for FP calibrations — generate_cfs","text":"","code":"generate_cfs(   calibration_csv,   more_csvs = FALSE,   more_plots = FALSE,   sensitivity_plots = FALSE,   include_only = NULL,   exclude = NULL,   gain_fix = FALSE,   rename_from = NULL,   rename_to = NULL,   subset_rows = FALSE,   rows_to_keep = c(\"C\", \"D\"),   separator = \"\",   complete_blank = FALSE,   outfolder = \".\" )"},{"path":"https://ec363.github.io/fpcountr/reference/generate_cfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate conversion factors for FP calibrations — generate_cfs","text":"calibration_csv character string. Path calibration data CSV file. more_csvs logical. Optionally save intermediate tables function. Defaults FALSE. more_plots logical. Optionally save plots. Defaults FALSE. sensitivity_plots logical. Optionally adds extra columns data min/max normalised fluorescence detectable molecules. also plots extra plots. Defaults FALSE. include_only character string. specified, includes measures (column names) specified . exclude character string. specified, excludes measures (column names) specified . gain_fix logical. Optionally add \"0\" 2-digit gain names .e. 'GFP 40' -> 'GFP 040', blueblue 40 -> blueblue 040- fixes ordering plots. Defaults FALSE. rename_from character string. Rename measures (column names) containing character string rename_from character string specified rename_to. rename_from rename_to need completed trigger renaming. rename_to character string. Rename measures (column names) containing character string rename_from character string specified rename_to. rename_from rename_to need completed trigger renaming. subset_rows logical. script take subset rows (whole table)? Defaults FALSE. rows_to_keep character array. subset_rows TRUE, script choose rows keep list. Defaults c(\"C\",\"D\"). separator character string represents separator channel name gain value measures columns, e.g. \"GFP 40\" \" \", \"GFP40\" \"\" \"GFP_40\" \"_\". Required plotting gain vs conversion factors. Defaults \"\". complete_blank logical. Optionally adds \"0\" concentration_ngul column wells identified blank (protein = \"none\"). Useful metadata missing values. Defaults FALSE. outfolder character string. Path folder output files saved. Defaults current working directory.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/generate_cfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate conversion factors for FP calibrations — generate_cfs","text":"","code":"if (FALSE) {   fitvals <- generate_cfs(     calibration_csv = \"data_parsed.csv\",     subset_rows = TRUE, rows_to_keep = c(\"C\",\"D\"),     outfolder = \"cfs_mCherry\"   ) }"},{"path":"https://ec363.github.io/fpcountr/reference/get_conc_a280.html","id":null,"dir":"Reference","previous_headings":"","what":"Get FP concentrations using A280 method — get_conc_a280","title":"Get FP concentrations using A280 method — get_conc_a280","text":"Get protein's concentration dilution series measured absorbance spectrum. Expects 'processed' data produced process_absorbance_spectrum(), file name ending _processed.csv, contains values corrected path length normalised blanks column called normalised_cm1_value, retains replicate data containing positional (well) information required exporting predicted concentrations end function. Uses get_extcoeff_a280() get EC M-1cm-1 wavelength, converts EC mass extinction coefficient (mgml)-1cm-1 using MW (worked protein_seq fpcountr::get_mw). function uses EC_A280_mgml work concentration protein well, using three correction methods. Instead using normalised data directly, values used based LOESS fit absorption spectra minimise fluctuations due noise. Finally, linear models fitted concentration prediction method, dataframe built, returned saved, containing predicted concentrations according user's chosen correction method. Plots showing analytical steps saved concurrently.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/get_conc_a280.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get FP concentrations using A280 method — get_conc_a280","text":"","code":"get_conc_a280(   protein_slug,   protein_seq,   buffer = \"\",   processed_spectrum_csv,   wells_to_remove = NULL,   disulphides = FALSE,   showWarnings = TRUE,   showMessages = FALSE,   corr_method = \"none\",   wav_to_use1 = 340,   wav_to_use2 = 333,   outfolder )"},{"path":"https://ec363.github.io/fpcountr/reference/get_conc_a280.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get FP concentrations using A280 method — get_conc_a280","text":"protein_slug character string protein name 'slug' form match slug FPbase entry. protein_seq character string protein sequence using 1-letter code. Required MW calculation. buffer character string buffer. Optional. Defaults \"\". processed_spectrum_csv Path CSV file processed absorbance spectrum. Processing done process_absorbance_spectrum(), corrects path lengths normalises blank wells. wells_to_remove list wells remove analysis. Defaults NULL. disulphides required calculation A280 extinction coefficient. logical. protein disulphides? Defaults FALSE. showWarnings required calculation A280 extinction coefficient. logical. function show warnings? Defaults TRUE. showMessages required calculation A280 extinction coefficient. logical. function show messages? Defaults TRUE. corr_method string corresponding type correction method use data remove contribution light scatter. Options none, baseline scatter. Method none applies correction. Method baseline subtracts absorbance value wavelength supplied wav_to_use1. Method scatter subtracts fraction absorbance value wavelength supplied wav_to_use2 according scatter theory (details section). wav_to_use1 numerical value wavelength (nm) use baseline correction. Defaults 340nm. wav_to_use2 numerical value wavelength (nm) use scatter correction. Defaults 333nm. outfolder path folder output files saved. Defaults current working directory.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/get_conc_a280.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get FP concentrations using A280 method — get_conc_a280","text":"","code":"if (FALSE) {   a280_concs <- get_conc_a280(     protein_slug = \"mcherry\", protein_seq = protein_seq, buffer = \"T5N15_pi\",     processed_spectrum_csv = \"abs_parsed_processed.csv\",     corr_method = \"scatter\", wav_to_use1 = 340, wav_to_use2 = 315,     outfolder = \"protquant_a280/mCherry_T5N15pi\"   ) }"},{"path":"https://ec363.github.io/fpcountr/reference/get_conc_bca.html","id":null,"dir":"Reference","previous_headings":"","what":"Get FP concentrations using bicinchoninic acid (BCA) assay method — get_conc_bca","title":"Get FP concentrations using bicinchoninic acid (BCA) assay method — get_conc_bca","text":"Get protein's concentration dilution series measured bicinchoninic acid (BCA) assay. Takes two input data sets, BCA assay data A562 baseline data. A562 baseline data necessary proteins might naturally absorb range. Script normalises BCA assay data A562 baseline, blank values BCA. Data bovine serum albumin (BSA) standards (identified protein column containing word \"BSA\"), used construct standard curve concentration ng/ul vs normalised A562 values, used predict FP concentrations dilution. FP's concentration vs dilution values used predict FP concentration dilution one two ways. option set fit, linear model fitted FP concentration dilution, fitted values exported. option set highest, FP concentrations taken highest concentration/dilution specified exported.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/get_conc_bca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get FP concentrations using bicinchoninic acid (BCA) assay method — get_conc_bca","text":"","code":"get_conc_bca(   microbca_data_csv,   a562_baseline_csv = NULL,   calibr,   buffer,   protein_seq,   option = \"highest\",   outfolder = \".\" )"},{"path":"https://ec363.github.io/fpcountr/reference/get_conc_bca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get FP concentrations using bicinchoninic acid (BCA) assay method — get_conc_bca","text":"microbca_data_csv path CSV file BCA data. a562_baseline_csv path CSV file A562 baseline data. Optional. data missing, use NULL. NULL specified, value 0 assigned baseline wells. Default NULL. calibr string specifying value 'calibrant' column assess function. Function subsets data value specified . works taking rows specified string calibrant column discarding rows (means blanks relevant specified calibrant need specified calibrant = calibr, protein = \"none\", otherwise removed). buffer string specifying value 'media' column assess function. Function subsets data value specified . protein_seq character string protein sequence using 1-letter code. Required MW calculation. option string specifying choose predicted concentration use. Default \"highest\", mean predicted concentration highest dilution (.e. neat) used, multiplied dilution determine concentration dilutions. alternative, \"fit\", fits y=mx linear model uses concentration determination. outfolder path folder output files saved. Defaults current working directory.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/get_conc_bca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get FP concentrations using bicinchoninic acid (BCA) assay method — get_conc_bca","text":"","code":"if (FALSE) {   bca_concs <- get_conc_bca(     microbca_data_csv = \"bca_data_parsed.csv\", a562_baseline_csv = \"a562_data_parsed.csv\",     calibr = \"mCherry\", buffer = \"T5N15_pi\", protein_seq = protein_seq, option = \"highest\",     outfolder = \"protquant_microbca/mCherry_T5N15pi\"   ) }"},{"path":"https://ec363.github.io/fpcountr/reference/get_conc_ecmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Get FP concentrations using ECmax method — get_conc_ecmax","title":"Get FP concentrations using ECmax method — get_conc_ecmax","text":"Get protein's concentration dilution series measured absorbance spectrum. Based get_conc_a280(), uses FPbase-stated extinction coefficient (EC) FPbase-stated maximal excitation wavelength (usually corresponds maximal absorbance wavelength), call protein's 'ECmax', order convert absorbance values concentrations. Expects 'processed' data produced process_absorbance_spectrum(), file name ending _processed.csv, contains values corrected path length normalised blanks column called normalised_cm1_value, retains replicate data containing positional (well) information required exporting predicted concentrations end function. Uses get_fpbase_properties() get FPbase EC M-1cm-1 wavelength, converts ECmax mass extinction coefficient (mgml)-1cm-1 using MW (worked protein_seq fpcountr::get_mw). function uses EC_max_mgml work concentration protein well, using three correction methods. Instead using normalised data directly, values used based LOESS fit absorption spectra minimise fluctuations due noise. Finally, linear models fitted concentration prediction method, dataframe built, returned saved, containing predicted concentrations according user's chosen correction method. Plots showing analytical steps saved concurrently. Troubleshooting: 'incompatible lengths' errors, adjust xrange avoid noisy wavelengths.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/get_conc_ecmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get FP concentrations using ECmax method — get_conc_ecmax","text":"","code":"get_conc_ecmax(   protein_slug,   protein_seq,   processed_spectrum_csv,   wells_to_remove = NULL,   xrange = c(250, 800),   corr_method = \"none\",   wav_to_use1 = 340,   wav_to_use2 = 333,   outfolder,   csv_only = FALSE )"},{"path":"https://ec363.github.io/fpcountr/reference/get_conc_ecmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get FP concentrations using ECmax method — get_conc_ecmax","text":"protein_slug character string protein name 'slug' form match slug FPbase entry. protein_seq character string protein sequence using 1-letter code. Required MW calculation. processed_spectrum_csv Path CSV file processed absorbance spectrum. Processing done process_absorbance_spectrum(), corrects path lengths normalises blank wells. wells_to_remove list wells remove analysis. Defaults NULL. xrange list two numerical values corresponding wavelength range keep fitting LOESS model across absorbance spectrum. default values 250nm 800nm data UV range noisy, adjusting xrange can prevent errors fitting. corr_method string corresponding type correction method use data remove contribution light scatter. Options none, baseline scatter. Method none applies correction. Method baseline subtracts absorbance value wavelength supplied wav_to_use1. Method scatter subtracts fraction absorbance value wavelength supplied wav_to_use2 according scatter theory (details section). wav_to_use1 numerical value wavelength (nm) use baseline correction. Defaults 340nm. wav_to_use2 numerical value wavelength (nm) use scatter correction. Defaults 333nm. outfolder path folder output files saved. Defaults current working directory. csv_only logical. Saves CSV files outputs TRUE. Defaults FALSE.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/get_conc_ecmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get FP concentrations using ECmax method — get_conc_ecmax","text":"","code":"if (FALSE) {   ecmax_concs <- get_conc_ecmax(     protein_slug = \"mcherry\", protein_seq = protein_seq,     processed_spectrum_csv = \"abs_parsed_processed.csv\",     corr_method = \"scatter\", wav_to_use1 = 700, wav_to_use2 = 315,     outfolder = \"protquant_ecmax/mCherry_T5N15pi\"   ) }"},{"path":"https://ec363.github.io/fpcountr/reference/get_extcoeff_a280.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a protein's molar extinction coefficient at A280 — get_extcoeff_a280","title":"Get a protein's molar extinction coefficient at A280 — get_extcoeff_a280","text":"Work theoretical molar extinction coefficient protein 280nm (EC280, M-1cm-1) using protein's primary sequence, using ProtParam method (Pace values). full explanation method can found https://web.expasy.org/protparam/protparam-doc.html.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/get_extcoeff_a280.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a protein's molar extinction coefficient at A280 — get_extcoeff_a280","text":"","code":"get_extcoeff_a280(   protein,   disulphides = FALSE,   showWarnings = TRUE,   showMessages = TRUE,   protein_name = \"-\",   buffer = \"-\",   mol_weight = NULL,   save = TRUE,   outfolder = \".\" )"},{"path":"https://ec363.github.io/fpcountr/reference/get_extcoeff_a280.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a protein's molar extinction coefficient at A280 — get_extcoeff_a280","text":"protein character string protein sequence using 1-letter code disulphides logical. protein disulphides? showWarnings logical. function show warnings? showMessages logical. function show messages? protein_name character string protein name. Optional. buffer character string buffer. Optional. mol_weight numerical value molecular weight (g/mol). Optional. specified function gives extinction coefficients 1% (10mg/ml) 0.1% (1mg/ml) solutions . save logical. function save CSV file output? outfolder path folder output files saved. Defaults current working directory.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/get_fpbase_properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Get properties of an FP from FPbase — get_fpbase_properties","title":"Get properties of an FP from FPbase — get_fpbase_properties","text":"Gets properties FP FPbase, including maximal excitation wavelength extinction coefficient. Optionally saves CSV.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/get_fpbase_properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get properties of an FP from FPbase — get_fpbase_properties","text":"","code":"get_fpbase_properties(   slug,   verbose = TRUE,   save_file = FALSE,   outfolder = \".\",   filename = \"fp_properties.csv\" )"},{"path":"https://ec363.github.io/fpcountr/reference/get_fpbase_properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get properties of an FP from FPbase — get_fpbase_properties","text":"slug Name FP, used find FP-relevant data lines FPbase datasets. argument called slug FPbase retrievals, needs exact match slug specified FPbase. (find , navigate FPbase entry FP copy part https://www.fpbase.org/protein/ (without trailing /). verbose logical. function print messages allow user check progress? Defaults TRUE. save_file logical. function save output CSV file? Defaults FALSE. outfolder path folder output files saved. Defaults current working directory. filename name output CSV file. Requires .csv end. Defaults fp_properties.csv.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/get_fpbase_properties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get properties of an FP from FPbase — get_fpbase_properties","text":"","code":"get_fpbase_properties(\"mcherry\") #> FP data retrieved from FPbase. #>              slug    name ex_max em_max ext_coeff   qy pka maturation lifetime #> 1 mcherry_default default    587    610     72000 0.22 4.5         15      1.4 #>   brightness #> 1      15.84"},{"path":"https://ec363.github.io/fpcountr/reference/get_kfactor.html","id":null,"dir":"Reference","previous_headings":"","what":"Get k-factor of a buffer — get_kfactor","title":"Get k-factor of a buffer — get_kfactor","text":"Calculates k-factor given buffer/temperature combination according data Thermo Scientific different buffers temperatures. k-factor defined A975-A900 1cm pathlength. calculations made assumption fold changes buffers water, temperatures 25oC may combined get approximate estimate k-factor given condition.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/get_kfactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get k-factor of a buffer — get_kfactor","text":"","code":"get_kfactor(   buffer_used = \"water\",   concentration_used = 0,   temperature_used = 25 )"},{"path":"https://ec363.github.io/fpcountr/reference/get_kfactor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get k-factor of a buffer — get_kfactor","text":"buffer_used string corresponding buffer. Must match buffer entry dataset kfactors_buffers_data. Default \"water\". concentration_used numeric value concentration buffer used. Default 0 (pure water), needs changing buffer water. Take care ensure units correct (buffers specified M require concentrations M mM). value ignored buffer = \"water\". temperature_used numeric value temperature oC. Default 25.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/get_kfactor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get k-factor of a buffer — get_kfactor","text":"","code":"get_kfactor(buffer_used = \"TBS\", concentration_used = 0.005, temperature_used = 30) #>  #> Calculating k-factor for TBS at concentration 0.005 at temperature 30 oC. #>  #> Reference k-factor 0.172. #>  #> K-factors available for given buffer:  #>   buffer concentration units description kfactor fold_change #> 1    TBS          0.05     M    TBS_50mM   0.166   0.9595376 #>  #> Values used for model (kfactor ~ concentration):  #>   buffer concentration units description kfactor fold_change #> 1  water          0.00  none       Water   0.173   1.0000000 #> 2    TBS          0.05     M    TBS_50mM   0.166   0.9595376 #>  #> Change in k-factor required for given buffer: 0.996. #>  #> Values used for model (fold_change ~ temperature):  #>   temperature kfactor fold_change #> 1          25   0.172       1.000 #> 2          28   0.174       1.012 #> 3          31   0.177       1.029 #> 4          34   0.179       1.041 #> 5          37   0.183       1.064 #> 6          41   0.188       1.093 #> 7          45   0.191       1.110 #>  #> Change in k-factor required for given temperature: 1.024. #>  #> Overall k-factor: 0.175. #> [1] 0.1754875"},{"path":"https://ec363.github.io/fpcountr/reference/get_mw.html","id":null,"dir":"Reference","previous_headings":"","what":"Get molecular weight of a protein — get_mw","title":"Get molecular weight of a protein — get_mw","text":"Get molecular weight protein Daltons sequence alone. Uses calculation (https://web.expasy.org/compute_pi/pi_tool-doc.html) amino acid mass data (aa_mass_data, https://web.expasy.org/findmod/findmod_masses.html#AA) Swiss Bioinformatics Resource Portal, Expasy.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/get_mw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get molecular weight of a protein — get_mw","text":"","code":"get_mw(protein)"},{"path":"https://ec363.github.io/fpcountr/reference/get_mw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get molecular weight of a protein — get_mw","text":"protein character string protein sequence using 1-letter code.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/get_pathlength.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path length in a typical 96-well plate — get_pathlength","title":"Get path length in a typical 96-well plate — get_pathlength","text":"Calculates path length input test_volume comparing linear model using internal data pathlengths vs volume. ... work pathlength microplate assay, two options. Option 1: Measure pathlength time assay taking A975-A900 well kfactor(well), calculating pathlength = kfactor(well) / kfactor(1cm pathlength). 1cm k-factors can derived using get_kfactor() function. Option 2 (used ): Create standardised dataset pathlength vs volume measuring A975-A900 defined volumes buffer, calculating pathlengths (pathlength_water_data dataset) use create linear model pathlength vs volume. Experimental data suggests aqueous buffers give similar pathlength values given volume, use data water approximate aqueous buffers.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/get_pathlength.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path length in a typical 96-well plate — get_pathlength","text":"","code":"get_pathlength(test_volume, plot = FALSE, outfolder = \".\")"},{"path":"https://ec363.github.io/fpcountr/reference/get_pathlength.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path length in a typical 96-well plate — get_pathlength","text":"test_volume numeric value volume whose pathlength required, microlitres (ul) plot logical. function plot model prediction? Defaults FALSE. outfolder path folder output files saved. Defaults current working directory.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/get_pathlength.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path length in a typical 96-well plate — get_pathlength","text":"","code":"get_pathlength(200) #> [1] 0.6072014"},{"path":"https://ec363.github.io/fpcountr/reference/kfactors_buffers_data.html","id":null,"dir":"Reference","previous_headings":"","what":"k-factors of different buffers — kfactors_buffers_data","title":"k-factors of different buffers — kfactors_buffers_data","text":"dataset containing k-factors (k-factor = A975-A900 1cm pathlength) range aqueous buffers salts solvents, obtained figure 5 Thermo Scientific application note 'Microplate Based Pathlength Correction Method Photometric DNA Quantification Assay' (Lampinen, Raitio, Perälä, Oranen Harinen, 2012, ANMR_MUGO_0412). dataset extracted using WebPlotDigitizer (https://automeris.io/WebPlotDigitizer/), tidied allow easier handling programmatic purposes, column added calculate fold change k-factors buffers compared water. Source: https://static.thermoscientific.com/images/D20827~.pdf","code":""},{"path":"https://ec363.github.io/fpcountr/reference/kfactors_buffers_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"k-factors of different buffers — kfactors_buffers_data","text":"","code":"kfactors_buffers_data"},{"path":"https://ec363.github.io/fpcountr/reference/kfactors_buffers_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"k-factors of different buffers — kfactors_buffers_data","text":"data frame 10 rows 6 variables: buffer name buffer concentration concentration buffer, units variable units units concentration column, M molar, pc percentage .e. w/v (%) description string containing buffer-concentration-units information one kfactor k-factor value (A975-A900 1cm pathlength) fold_change fold change k-factor water","code":""},{"path":"https://ec363.github.io/fpcountr/reference/kfactors_temperature_data.html","id":null,"dir":"Reference","previous_headings":"","what":"k-factors of water at different temperatures — kfactors_temperature_data","title":"k-factors of water at different temperatures — kfactors_temperature_data","text":"dataset containing k-factors (k-factor = A975-A900 1cm pathlength) water different temperatures, obtained figure 6 Thermo Scientific application note 'Microplate Based Pathlength Correction Method Photometric DNA Quantification Assay' (Lampinen, Raitio, Perälä, Oranen Harinen, 2012, ANMR_MUGO_0412). dataset extracted using WebPlotDigitizer (https://automeris.io/WebPlotDigitizer/), column added calculate fold change k-factors temperatures compared 25oC. Source: https://static.thermoscientific.com/images/D20827~.pdf","code":""},{"path":"https://ec363.github.io/fpcountr/reference/kfactors_temperature_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"k-factors of water at different temperatures — kfactors_temperature_data","text":"","code":"kfactors_temperature_data"},{"path":"https://ec363.github.io/fpcountr/reference/kfactors_temperature_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"k-factors of water at different temperatures — kfactors_temperature_data","text":"data frame 10 rows 6 variables: temperature temperature oC kfactor k-factor value (A975-A900 1cm pathlength) fold_change fold change k-factor 25oC","code":""},{"path":"https://ec363.github.io/fpcountr/reference/norm_flu.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalise fluorescence against negative well autofluorescence — norm_flu","title":"Normalise fluorescence against negative well autofluorescence — norm_flu","text":"Used process_plate function fluorescence normalisation. Remains virtually unchanged flopr::flu_norm, except af_model can set NULL normalise blank wells instead, files saved specified outfolder.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/norm_flu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalise fluorescence against negative well autofluorescence — norm_flu","text":"","code":"norm_flu(   pr_data,   neg_well,   blank_well,   flu_name,   af_model,   data_csv,   timecourse,   outfolder )"},{"path":"https://ec363.github.io/fpcountr/reference/norm_flu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalise fluorescence against negative well autofluorescence — norm_flu","text":"pr_data long data.frame containing plate reader data OD normalised neg_well well coordinates non-fluorescent control blank_well well coordinates media blank flu_name column name fluorescence channel normalise af_model model used fit negative control autofluorescence. now include \"polynomial\", \"inverse_poly\", \"exponential\", \"spline\" \"loess\". set NULL, model used, fluorescence normalised akin OD: subtracting value blanks. data_csv path original data. Used saving normalisation curve plots. timecourse logical. data timecourse/kinetic data include variable called 'time'? outfolder path folder output files saved. Defaults current working directory.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/norm_flu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalise fluorescence against negative well autofluorescence — norm_flu","text":"updated data.frame additional column normalised fluorescence","code":""},{"path":"https://ec363.github.io/fpcountr/reference/norm_od.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalise optical density against blank wells — norm_od","title":"Normalise optical density against blank wells — norm_od","text":"Used process_plate function OD normalisation. Remains virtually unchanged flopr::od_norm.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/norm_od.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalise optical density against blank wells — norm_od","text":"","code":"norm_od(pr_data, blank_well, od_name, timecourse)"},{"path":"https://ec363.github.io/fpcountr/reference/norm_od.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalise optical density against blank wells — norm_od","text":"pr_data long data.frame containing plate reader data blank_well well coordinates one media blanks od_name column name optical density data timecourse logical. data timecourse/kinetic data include variable called 'time'?","code":""},{"path":"https://ec363.github.io/fpcountr/reference/norm_od.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalise optical density against blank wells — norm_od","text":"updated data.frame additional column \"normalised_OD\"","code":""},{"path":"https://ec363.github.io/fpcountr/reference/parse_magellan.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Tecan Spark/Magellan data from endpoint and kinetic assays — parse_magellan","title":"Parse Tecan Spark/Magellan data from endpoint and kinetic assays — parse_magellan","text":"Parses data exported Tecan Spark plate reader using Magellan software. Handles standard (endpoint) timecourse (kinetic) data containing absorbance /fluorescence readings, handle spectra, absorbance scans. Parsing consists data extraction, data tidying, data joining relevant metadata.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/parse_magellan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Tecan Spark/Magellan data from endpoint and kinetic assays — parse_magellan","text":"","code":"parse_magellan(   data_csv,   metadata_csv,   timeseries = FALSE,   timestart = \"0s\",   interval = 10,   mode = \"read_first\",   metadata_above = 0,   metadata_below = 0,   custom = FALSE,   startcol = 2,   endcol = 97,   insert_wells_above = 0,   insert_wells_below = 0 )"},{"path":"https://ec363.github.io/fpcountr/reference/parse_magellan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Tecan Spark/Magellan data from endpoint and kinetic assays — parse_magellan","text":"data_csv path CSV file Tecan Spark plate reader metadata_csv path CSV file containing metadata timeseries logical. data timeseries? Defaults FALSE. timestart string indicating timepoint specified column1 export file corresponding first row data. \"0s\" default. interval numeric. time interval minutes readings kinetic loop. Default 10. mode mode two options: \"read_first\" \"incubate_first\". Setting \"read_first\" mode tells script plate reader method started reading relevant channels, followed incubation interval time, meaning first timepoint 0 min. Setting \"incubate_first\" mode tells script opposite true, making first timepoint equal length set interval, e.g. 10 min. metadata_above numeric value corresponding number types metadata requested creation Excel export file Magellan, placed data. can include Well positions, Layout, Replicate info, etc. metadata_below numeric value corresponding number types metadata requested creation Excel export file Magellan, placed data. can include Well positions, Layout, Replicate info, etc. custom Boolean flag indicating whether script deviate default collecting data columns 2:97. TRUE, script looks arguments insert_wells_above, insert_wells_below, startcol, endcol. total number columns needs add 96 metadata_csv file includes rows A1-H12 must order metadata file script joins positionally, recorded well value (wells exported default). startcol numeric value corresponding first column data_csv corresponding data endcol numeric value corresponding last column data_csv corresponding data insert_wells_above numeric value corresponding number empty entries insert data custom mode. can useful portion plate read, meaning number rows created startcol:endcol add 96. example, data starts B1, metadata starts A1, can set 12 add 12 empty rows data allows correct joining data metadata tables. insert_wells_below numeric value corresponding number empty entries insert data custom mode.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/parse_magellan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Tecan Spark/Magellan data from endpoint and kinetic assays — parse_magellan","text":"data.frame containing parsed plate reader data","code":""},{"path":"https://ec363.github.io/fpcountr/reference/parse_magellan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse Tecan Spark/Magellan data from endpoint and kinetic assays — parse_magellan","text":"","code":"if (FALSE) {   parsed_calib_plate <- parse_magellan(     data_csv = \"calibrations/20210104_calibration_data.csv\",     metadata_csv = \"calibrations/20210104_calibration_metadata.csv\",     timeseries = FALSE   )    parsed_data <- parse_magellan(     data_csv = \"data/20210104_data.csv\",     metadata_csv = \"data/20210104_metadata.csv\",     timeseries = TRUE, timestart = \"0s\", interval = 30, mode = \"read_first\"   ) }"},{"path":"https://ec363.github.io/fpcountr/reference/parse_magellan_spectrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Tecan Spark/Magellan data from absorbance spectrum data — parse_magellan_spectrum","title":"Parse Tecan Spark/Magellan data from absorbance spectrum data — parse_magellan_spectrum","text":"Parses absorbance spectrum data exported Tecan Spark plate reader using Magellan software. Parsing consists data extraction, data tidying, data joining relevant metadata.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/parse_magellan_spectrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Tecan Spark/Magellan data from absorbance spectrum data — parse_magellan_spectrum","text":"","code":"parse_magellan_spectrum(   data_csv,   metadata_csv,   wellstart = \"A1\",   wellend = \"H12\" )"},{"path":"https://ec363.github.io/fpcountr/reference/parse_magellan_spectrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Tecan Spark/Magellan data from absorbance spectrum data — parse_magellan_spectrum","text":"data_csv path CSV file Tecan Spark plate reader metadata_csv path CSV file containing metadata wellstart character string representing first well recorded data file. Defaults \"A1\". wellend character string representing last well recorded data file. Defaults \"H12\".","code":""},{"path":"https://ec363.github.io/fpcountr/reference/parse_magellan_spectrum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Tecan Spark/Magellan data from absorbance spectrum data — parse_magellan_spectrum","text":"data.frame containing parsed plate reader data","code":""},{"path":"https://ec363.github.io/fpcountr/reference/parse_magellan_spectrum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse Tecan Spark/Magellan data from absorbance spectrum data — parse_magellan_spectrum","text":"","code":"if (FALSE) {   parsed_data <- parse_magellan_spectrum(     data_csv = \"data/20210104_data.csv\",     metadata_csv = \"data/20210104_metadata.csv\",     wellstart = \"A1\", wellend = \"H12\"   ) }"},{"path":"https://ec363.github.io/fpcountr/reference/parse_sparkcontrol.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Tecan Spark/SparkControl data from endpoint and kinetic assays — parse_sparkcontrol","title":"Parse Tecan Spark/SparkControl data from endpoint and kinetic assays — parse_sparkcontrol","text":"Parses data exported Tecan Spark plate reader using SparkControl software. Handles standard (endpoint) timecourse (kinetic) data containing absorbance /fluorescence readings, handle spectra, absorbance scans. Parsing consists data extraction, data tidying, data joining relevant metadata. Originally based flopr::spark_parse() function.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/parse_sparkcontrol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Tecan Spark/SparkControl data from endpoint and kinetic assays — parse_sparkcontrol","text":"","code":"parse_sparkcontrol(data_csv, metadata_csv, timeseries = FALSE)"},{"path":"https://ec363.github.io/fpcountr/reference/parse_sparkcontrol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Tecan Spark/SparkControl data from endpoint and kinetic assays — parse_sparkcontrol","text":"data_csv path CSV file Tecan Spark plate reader metadata_csv path CSV file containing metadata timeseries logical. data timeseries? Defaults FALSE.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/parse_sparkcontrol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Tecan Spark/SparkControl data from endpoint and kinetic assays — parse_sparkcontrol","text":"data.frame containing parsed plate reader data","code":""},{"path":"https://ec363.github.io/fpcountr/reference/parse_sparkcontrol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse Tecan Spark/SparkControl data from endpoint and kinetic assays — parse_sparkcontrol","text":"","code":"if (FALSE) {   parsed_calib_plate <- parse_sparkcontrol(     data_csv = \"calibrations/20210104_calibration_data.csv\",     metadata_csv = \"calibrations/20210104_calibration_metadata.csv\",     timeseries = FALSE   )    parsed_data <- parse_sparkcontrol(     data_csv = \"data/20210104_data.csv\",     metadata_csv = \"data/20210104_metadata.csv\",     timeseries = TRUE   ) }"},{"path":"https://ec363.github.io/fpcountr/reference/parse_sparkcontrol_spectrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Tecan Spark/SparkControl data from absorbance spectrum data — parse_sparkcontrol_spectrum","title":"Parse Tecan Spark/SparkControl data from absorbance spectrum data — parse_sparkcontrol_spectrum","text":"Parses absorbance spectrum data exported Tecan Spark plate reader using SparkControl software. Parsing consists data extraction, data tidying, data joining relevant metadata. Based parse_magellan_spectrum().","code":""},{"path":"https://ec363.github.io/fpcountr/reference/parse_sparkcontrol_spectrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Tecan Spark/SparkControl data from absorbance spectrum data — parse_sparkcontrol_spectrum","text":"","code":"parse_sparkcontrol_spectrum(   data_csv,   metadata_csv,   wellstart = \"A1\",   wellend = \"H12\" )"},{"path":"https://ec363.github.io/fpcountr/reference/parse_sparkcontrol_spectrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Tecan Spark/SparkControl data from absorbance spectrum data — parse_sparkcontrol_spectrum","text":"data_csv path CSV file Tecan Spark plate reader metadata_csv path CSV file containing metadata wellstart character string representing first well recorded data file. Defaults \"A1\". wellend character string representing last well recorded data file. Defaults \"H12\".","code":""},{"path":"https://ec363.github.io/fpcountr/reference/parse_sparkcontrol_spectrum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Tecan Spark/SparkControl data from absorbance spectrum data — parse_sparkcontrol_spectrum","text":"data.frame containing parsed plate reader data","code":""},{"path":"https://ec363.github.io/fpcountr/reference/parse_sparkcontrol_spectrum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse Tecan Spark/SparkControl data from absorbance spectrum data — parse_sparkcontrol_spectrum","text":"","code":"if (FALSE) {   parsed_data <- parse_sparkcontrol_spectrum(     data_csv = \"data/20210104_data.csv\",     metadata_csv = \"data/20210104_metadata.csv\",     wellstart = \"A1\", wellend = \"H12\"   ) }"},{"path":"https://ec363.github.io/fpcountr/reference/pathlength_water_data.html","id":null,"dir":"Reference","previous_headings":"","what":"pathlength vs volume data — pathlength_water_data","title":"pathlength vs volume data — pathlength_water_data","text":"dataset containing experimentally derived pathlengths microplate wells containing water different volumes. Pathlengths derived using equation pathlength (cm) = kfactor_well / kfactor_1cm. Kfactor_well defined A975-A900 value well (4 replicates per volume per experiment). Kfactor_1cm values derived using get_kfactors function water 26oC.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/pathlength_water_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pathlength vs volume data — pathlength_water_data","text":"","code":"pathlength_water_data"},{"path":"https://ec363.github.io/fpcountr/reference/pathlength_water_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"pathlength vs volume data — pathlength_water_data","text":"data frame 10 rows 6 variables: volume volume ul pathlength pathlength cm expt experiment number denoting experimental repeat","code":""},{"path":"https://ec363.github.io/fpcountr/reference/process_absorbance_spectrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Process absorbance spectrum data — process_absorbance_spectrum","title":"Process absorbance spectrum data — process_absorbance_spectrum","text":"Processes raw absorbance spectrum data, collected dilution series. Expects 'parsed' data tidy attached appropriate metadata. Corrects raw data path length 1cm user-defined method, normalises blanks. Plots spectra returns processed data.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/process_absorbance_spectrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process absorbance spectrum data — process_absorbance_spectrum","text":"","code":"process_absorbance_spectrum(   spectrum_csv,   subset_rows = FALSE,   rows_to_keep = c(\"C\", \"D\"),   columns_to_keep = c(1, 12),   xrange = c(200, 1000),   pl_method = \"calc_blanks\",   buffer_used = \"water\",   concentration_used = 0,   temperature_used = 25,   outfolder = \".\",   csv_only = FALSE )"},{"path":"https://ec363.github.io/fpcountr/reference/process_absorbance_spectrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process absorbance spectrum data — process_absorbance_spectrum","text":"spectrum_csv path CSV file spectrum data subset_rows logical. script take subset rows (whole table)? Defaults FALSE. rows_to_keep character array. subset_rows TRUE, script choose rows keep list. Defaults c(\"C\",\"D\"). columns_to_keep numeric array. subset_rows TRUE, script choose rows keep list. Defaults c(1,12). Note blanks required normalisation, blanks column12, necessary include 12 list. xrange numerical lower upper bounds wavelengths, subset plotting. can useful clear plates, high background <300nm, can set xrange c(300,800) similar. pl_method string denoting method path length normalisation use. Options calc_each, calc_blanks volume. three always calculated (compared one output plots), chosen method used. calc_each method uses path length calculated well separately using A900 A975 measurements k-factor buffer used. calc_blanks method uses path length calculated blanks wells. Finally, volume method uses path length expected given volume, using internal path length data measured water via internal fpcountr::get_pathlength() function. Defaults calc_blanks. buffer_used string corresponding buffer used assay, use path length determination. Must table used fpcountr::get_kfactor(). look table, use fpcountr::view_kfactors(). Defaults \"water\". concentration_used numeric value corresponding concentration buffer, use path length determination. Must units used table fpcountr::get_kfactor(). look table, use fpcountr::view_kfactors(). Defaults 0, effectively means water. Needs changing using different buffer! temperature_used numeric value corresponding temperature assay, use path length determination. Defaults 25. outfolder path folder output files saved. Defaults current working directory. csv_only logical. Saves CSV files outputs TRUE. Defaults FALSE.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/process_absorbance_spectrum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process absorbance spectrum data — process_absorbance_spectrum","text":"","code":"if (FALSE) {   spectrum <- process_absorbance_spectrum(     spectrum_csv = \"spectrum_parsed.csv\",     subset_rows = TRUE, rows_to_keep = c(\"C\",\"D\"), columns_to_keep = c(1:12),     pl_method = \"calc_blanks\",     buffer_used = \"TBS\", concentration_used = 0.005, temperature_used = 30,     xrange = c(250,1000),     outfolder = \"spectrum\"   ) }"},{"path":"https://ec363.github.io/fpcountr/reference/process_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"Process experimental data (normalise, correct and calibrate) — process_plate","title":"Process experimental data (normalise, correct and calibrate) — process_plate","text":"Processes experimental (fluorescence absorbance) data microplate readers. Expects 'parsed' data tidy attached appropriate metadata. Numerous arguments offer options customise whether normalisation, correction /calibration carried . Data can timecourse (kinetic) data single timepoint (endpoint) data, can contain fluorescence data include absorbance (OD) data enumerate cell density. Originally based flopr::process_plate() numerous changes. First, function normalises optical density readings (present) media/buffer wells, fluorescence readings, either media/buffer wells cellular autofluorescence. Fluorescence channels must specified flu_channels, blank wells blank_wells, reading used optical density od_name. cellular autofluorescence model can set af_model negative (neg_well) wells, set NULL. Second, do_quench_correction TRUE, 'quenching' attenuation fluorescence measurements cells corrected according cell density measured. requires specification od_type \"OD600\" \"OD700\". Third, do_calibrate TRUE, normalised values fluorescence optical density converted meaningful units. , paths conversion factor CSV files must provided od_coeffs_csv OD fluor_coeffs_csv fluorescence. fluorescence measurements, calibration must specified flu_slugs represent FP used, flu_gains provide gain, flu_labels specify relevant plots labelled, (e.g. flu_slugs = c(\"mcherry\", \"mtagbfp2\"), flu_gains = c(60,80), flu_labels = c(\"RFP, BFP\")).","code":""},{"path":"https://ec363.github.io/fpcountr/reference/process_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process experimental data (normalise, correct and calibrate) — process_plate","text":"","code":"process_plate(   data_csv,   blank_well = \"A1\",   timecourse = TRUE,   od_name = \"OD\",   flu_channels = c(\"green1green2\"),   flu_channels_rename = NULL,   af_model = \"spline\",   neg_well = \"A2\",   do_quench_correction = FALSE,   od_type,   do_calibrate = FALSE,   instr,   flu_slugs = c(),   flu_gains = c(),   flu_labels = c(),   od_coeffs_csv,   fluor_coeffs_csv,   outfolder = \".\",   csv_only = FALSE )"},{"path":"https://ec363.github.io/fpcountr/reference/process_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process experimental data (normalise, correct and calibrate) — process_plate","text":"data_csv path CSV file containing parsed plate reader data blank_well well coordinates one media blanks. Defaults \"A1\". timecourse logical. data timecourse/kinetic data include variable called 'time'? od_name column name optical density data. Defaults \"OD\". OD measurements taken, use NULL. flu_channels column names fluorescence data. Defaults \"green1green2\". flu_channels_rename specified, change flu_channels column names , computing normalisations calibrations. Can useful channel_name calibration file named differently columns data file. Needs length flu_channels, require changing, specify anyway allow positional replacement (first element flu_channels_rename replaces first flu_channels, etc.). Defaults NULL. af_model model used fit negative control autofluorescence. now include \"polynomial\", \"inverse_poly\", \"exponential\", \"spline\" \"loess\". set NULL, model used, fluorescence normalised akin OD: subtracting value blanks. Defaults \"spline\". neg_well well coordinates non-fluorescent control. Defaults \"A2\". do_quench_correction logical. function correct anticipated quenching fluorescence, depending cell density? od_type OD-type used? Required quench correction. \"OD600\" \"OD700\". do_calibrate logical. function convert OD fluorescence data calibrated units? Defaults FALSE. instr character string represent instrument. do_calibrate = TRUE, used filtering od_coeffs_csv fluor_coeffs_csv files conversion factors relevant instrument. flu_slugs character array representing fluorescent proteins (format = FPbase slug). do_calibrate = TRUE, used filtering fluor_coeffs_csv conversion factors relevant FP. flu_gains numeric array representing gains fluorescent channel. do_calibrate = TRUE, used filtering fluor_coeffs_csv conversion factors relevant gain. flu_labels do_calibrate = TRUE, column names given calibration. May identical flu_slug flu_channel, recommended make obvious FP calibrated, e.g. \"mCherry\", channel names may non-specifically named e.g. \"red1red1\". Needs length flu_slugs flu_gains. od_coeffs_csv do_calibrate = TRUE, path CSV file containing conversion factors optical density fluor_coeffs_csv do_calibrate = TRUE, path CSV file containing predicted conversion factors fluorescent channels outfolder path folder output files saved. Defaults current working directory. csv_only logical. Saves CSV files outputs TRUE. Defaults FALSE.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/process_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process experimental data (normalise, correct and calibrate) — process_plate","text":"data.frame columns raw plate reader data, normalised data , do_calibrate = TRUE, calibrated OD FP data","code":""},{"path":"https://ec363.github.io/fpcountr/reference/process_plate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process experimental data (normalise, correct and calibrate) — process_plate","text":"","code":"if (FALSE) {   processed_data <- process_plate(     data_csv = \"mcherry_parsed.csv\",     blank_well = c(\"A11\"),     od_name = \"OD600\", flu_channels = c(\"red1\"), flu_channels_rename = c(\"red1red1\"),     af_model = NULL,     do_quench_correction = TRUE, od_type = \"OD700\",     do_calibrate = TRUE, instr = \"spark1\",     flu_slugs = c(\"mcherry\"), flu_gains = c(80), flu_labels = c(\"mcherry\"),     od_coeffs_csv = \"od_coeffs.csv\", fluor_coeffs_csv = \"flu_coeffs.csv\",     outfolder = file.path(\"data_processed\")   ) }"},{"path":"https://ec363.github.io/fpcountr/reference/protein_seq_data.html","id":null,"dir":"Reference","previous_headings":"","what":"protein sequence data — protein_seq_data","title":"protein sequence data — protein_seq_data","text":"table containing protein sequences used FPCountR paper.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/protein_seq_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"protein sequence data — protein_seq_data","text":"","code":"protein_seq_data"},{"path":"https://ec363.github.io/fpcountr/reference/protein_seq_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"protein sequence data — protein_seq_data","text":"data frame 4 rows 3 variables: name protein name slug protein slug - lower case name used url fpbase entry sequence primary sequence 1-letter code","code":""},{"path":"https://ec363.github.io/fpcountr/reference/save_metadata_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a template metadata file — save_metadata_template","title":"Save a template metadata file — save_metadata_template","text":"Save CSV file containing minimum columns required functions parse process given data_type fpcountr. One three data types can chosen: absorbance spectrum data calibrations (\"absspectrum\"), fluorescence data calibrations (\"fluordata\") experimental data (\"exptdata\") well column populated wells given plate type specified plate_type. file saved location specified outfolder.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/save_metadata_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a template metadata file — save_metadata_template","text":"","code":"save_metadata_template(data_type, plate_type = 96, outfolder = \".\")"},{"path":"https://ec363.github.io/fpcountr/reference/save_metadata_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a template metadata file — save_metadata_template","text":"data_type type data, absorbance spectrum data calibrations (\"absspectrum\"), fluorescence data calibrations (\"fluordata\") experimental data (\"exptdata\"). plate_type type plate. numeric, .e. 96 96-well plate. outfolder path folder output files saved. Defaults current working directory","code":""},{"path":"https://ec363.github.io/fpcountr/reference/save_metadata_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a template metadata file — save_metadata_template","text":"","code":"if (FALSE) {   save_metadata_template(data_type = \"exptdata\", plate_type = 96, outfolder = \".\") }"},{"path":"https://ec363.github.io/fpcountr/reference/view_kfactors.html","id":null,"dir":"Reference","previous_headings":"","what":"View k-factors — view_kfactors","title":"View k-factors — view_kfactors","text":"Displays data tables used k-factor calculations get_kfactors(), along notes.","code":""},{"path":"https://ec363.github.io/fpcountr/reference/view_kfactors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View k-factors — view_kfactors","text":"","code":"view_kfactors()"},{"path":"https://ec363.github.io/fpcountr/reference/view_kfactors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View k-factors — view_kfactors","text":"","code":"view_kfactors() #>  #> Data from https://static.thermoscientific.com/images/D20827~.pdf : #>            buffer concentration units         description kfactor fold_change #> 1           water          0.00  none               Water   0.173   1.0000000 #> 2    Na_phosphate          0.10     M  Na_phosphate_100mM   0.170   0.9826590 #> 3            NaOH          0.02     M           NaOH_20mM   0.169   0.9768786 #> 4  sulphuric_acid          0.02     M sulphuric_acid_20mM   0.169   0.9768786 #> 5       TE_buffer          0.01     M      TE_buffer_10mM   0.169   0.9768786 #> 6            NaCl          0.90    pc           NaCl_0.9%   0.168   0.9710983 #> 7             TBS          0.05     M            TBS_50mM   0.166   0.9595376 #> 8    Na_phosphate          0.08     M   Na_phosphate_80mM   0.166   0.9595376 #> 9        Tris-HCl          1.00     M         Tris-HCl_1M   0.157   0.9075145 #> 10          Tween          0.10    pc          Tween_0.1%   0.155   0.8959538 #> 11 sulphuric_acid          2.00     M   sulphuric_acid_2M   0.154   0.8901734 #> 12           DMSO          1.00    pc             DMSO_1%   0.169   0.9768786 #> 13           DMSO          5.00    pc             DMSO_5%   0.159   0.9190751 #> 14           DMSO         10.00    pc            DMSO_10%   0.148   0.8554913 #> 15           EtOH          5.00    pc             EtOH_5%   0.159   0.9190751 #> 16           EtOH         20.00    pc            EtOH_20%   0.129   0.7456647 #> 17           EtOH         40.00    pc            EtOH_40%   0.092   0.5317919 #> 18           MeOH          5.00    pc             MeOH_5%   0.161   0.9306358 #> 19           MeOH         20.00    pc            MeOH_20%   0.133   0.7687861 #> 20           MeOH         40.00    pc            MeOH_40%   0.100   0.5780347 #>  #>   temperature kfactor fold_change #> 1          25   0.172       1.000 #> 2          28   0.174       1.012 #> 3          31   0.177       1.029 #> 4          34   0.179       1.041 #> 5          37   0.183       1.064 #> 6          41   0.188       1.093 #> 7          45   0.191       1.110 #>  #> The k-factor of water (A975-A900 at 1cm) at ~25oC is 0.172. #> Increasing the temperature has a small effect: 30oC = 3% increase to 0.176. #> The volume of water is minimally effected by temperature, so path lengths calculated at 25oC should apply to other temperatures. #>  #> Most aqueous buffers with low salt will be ~ 0.170 and can therefore be approximated to the k-factor of pure water. #> eg. #> 153mM (0.9%) NaCl = 0.168, TE = 0.169, 50mM TBS = 0.166 #> 1M Tris-HCl = 0.157, 2M H2SO4 = 0.154 #>  #> Other solvents, like DMSO, EtOH and MeOH have a bigger effect. #> eg. #> 10% DMSO = 0.148 #> 20% EtOH = 0.092, 20% MeOH = 0.100 #> 100% EtOH and MeOH have negative k-factors, and k-factors with these solvents are no longer reliable methods for calculating path lengths."},{"path":"https://ec363.github.io/fpcountr/news/index.html","id":"fpcountr-v020","dir":"Changelog","previous_headings":"","what":"fpcountr v0.2.0","title":"fpcountr v0.2.0","text":"get_conc_ECmax() updated correctly display plots save plots report success normalisation. fpbase data updated, alongside get_properties() data message README introduction expanded README protocols.io link updated README updated citation links, badges logo","code":""},{"path":"https://ec363.github.io/fpcountr/news/index.html","id":"fpcountr-v010","dir":"Changelog","previous_headings":"","what":"fpcountr v0.1.0","title":"fpcountr v0.1.0","text":"Initial release.","code":""}]
